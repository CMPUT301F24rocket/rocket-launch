Index: app/src/main/java/com/example/rocket_launch/entrant_events_tab/RegisteredEventDetailsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch.entrant_events_tab;\n\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.ImageButton;\nimport android.widget.TextView;\n\nimport androidx.fragment.app.Fragment;\n\nimport com.example.rocket_launch.Event;\nimport com.example.rocket_launch.EventsDB;\nimport com.example.rocket_launch.R;\nimport com.example.rocket_launch.UsersDB;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.firebase.firestore.DocumentSnapshot;\n\n/**\n * fragment to show details about a registered event\n */\npublic class RegisteredEventDetailsFragment extends Fragment {\n    String eventId;\n    Event event;\n    EventsDB eventsdb;\n    UsersDB usersDB;\n    TextView eventNameView;\n    TextView eventCapacityView;\n    CheckBox eventGeolocationRequired;\n    TextView eventDescription;\n\n    Button removeRegistrationButton;\n\n\n    public RegisteredEventDetailsFragment() {\n        // needs to be empty\n    }\n\n    public RegisteredEventDetailsFragment(Event event) {\n        this.event = event;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        eventsdb = new EventsDB();\n        usersDB = new UsersDB();\n\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_registered_event_details, container, false);\n\n        eventNameView = view.findViewById(R.id.view_event_name);\n        eventCapacityView = view.findViewById(R.id.view_event_capacity);\n        eventGeolocationRequired = view.findViewById(R.id.view_checkbox_geolocation_requirement);\n        eventDescription = view.findViewById(R.id.view_event_description);\n        ImageButton imageButton = view.findViewById(R.id.add_event_poster_button);\n        imageButton.setVisibility(View.GONE);\n\n        removeRegistrationButton = view.findViewById(R.id.cancel_registration_button);\n        removeRegistrationButton.setOnClickListener(l -> {\n            removeRegisterEvent();\n        });\n\n        view.findViewById(R.id.cancel_button).setOnClickListener(l -> {\n            closeFragment();\n        });\n        getEvent();\n\n        return view;\n    }\n\n    /**\n     * loads an event with eventId\n     */\n    private void getEvent() {\n        eventsdb.loadEvent(event.getEventID(), new OnSuccessListener<Event>() {\n            @Override\n            public void onSuccess(Event loadedEvent) {\n                if (loadedEvent != null) {\n                    event = loadedEvent;\n                    eventNameView.setText(event.getName());\n                    eventCapacityView.setText(String.valueOf( event.getCapacity() ));\n                    eventGeolocationRequired.setChecked(event.getGeolocationRequired());\n                    eventDescription.setText(event.getDescription());\n                    // in get event so we cant press before we have event\n                    removeRegistrationButton.setOnClickListener(l -> {\n\n                    });\n                }\n            }\n        });\n    }\n\n    /**\n     * function to allow user to register in an event\n     */\n    private void removeRegisterEvent() {\n        // get user id\n        String androidId = Settings.Secure\n                .getString(requireContext().getContentResolver(), Settings.Secure.ANDROID_ID);\n\n        // remove from registered events\n        eventsdb.removeUserFromRegisteredList(event.getEventID(), androidId);\n\n        // remove from registered events\n        usersDB.removeRegisteredEvent(androidId, event.getEventID());\n        closeFragment();\n    }\n\n    /**\n     * closes fragment\n     */\n    private void closeFragment() {\n        requireActivity().getSupportFragmentManager().popBackStack();\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/entrant_events_tab/RegisteredEventDetailsFragment.java b/app/src/main/java/com/example/rocket_launch/entrant_events_tab/RegisteredEventDetailsFragment.java
--- a/app/src/main/java/com/example/rocket_launch/entrant_events_tab/RegisteredEventDetailsFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/entrant_events_tab/RegisteredEventDetailsFragment.java	(date 1733121085663)
@@ -35,10 +35,17 @@
     Button removeRegistrationButton;
 
 
+    /**
+     * Empty constructor
+     */
     public RegisteredEventDetailsFragment() {
         // needs to be empty
     }
 
+    /**
+     * Constructor that has an event parameter
+     * @param event Registered event
+     */
     public RegisteredEventDetailsFragment(Event event) {
         this.event = event;
     }
Index: app/src/main/java/com/example/rocket_launch/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.util.Log;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.View;\n\nimport androidx.activity.EdgeToEdge;\nimport androidx.annotation.NonNull;\nimport androidx.appcompat.app.AppCompatActivity;\nimport androidx.core.graphics.Insets;\nimport androidx.core.view.ViewCompat;\nimport androidx.core.view.WindowInsetsCompat;\n\nimport com.example.rocket_launch.admin.AdminModeActivity;\nimport com.example.rocket_launch.nav_fragments.CreateEventFragment;\nimport com.example.rocket_launch.nav_fragments.NotificationsFragment;\nimport com.example.rocket_launch.nav_fragments.UserEventsFragment;\nimport com.example.rocket_launch.nav_fragments.UserProfileFragment;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.android.material.bottomnavigation.BottomNavigationView;\n\nimport org.osmdroid.config.Configuration;\n\n/**\n * main activity that gets loaded on startup\n */\npublic class MainActivity extends AppCompatActivity {\n    UsersDB usersDB;\n    BottomNavigationView bottomNav;\n\n    CreateEventFragment createEvent;\n    UserEventsFragment userEvents;\n    UserProfileFragment userProfile;\n    NotificationsFragment notifications;\n\n\n    NotificationHandler notificationHandler;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        EdgeToEdge.enable(this);\n        setContentView(R.layout.activity_main);\n        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main_activity), (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);\n            return insets;\n        });\n\n        View fragmentView = findViewById(R.id.fragment_frame);\n        ViewCompat.setOnApplyWindowInsetsListener(fragmentView, (v, insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(0,0,0, 0);\n            return insets;\n        });\n\n        View navBarView = findViewById((R.id.bottom_nav_view));\n        ViewCompat.setOnApplyWindowInsetsListener(navBarView, (v,insets) -> {\n            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());\n            v.setPadding(systemBars.left, 0, systemBars.right, 0);\n            return insets;\n        });\n\n        //Referenced: https://github.com/osmdroid/osmdroid/wiki/How-to-use-the-osmdroid-library-(Java), accessed 2024-11-24\n        //Initializing osmdroid configuration\n        Context context = getApplicationContext();\n        SharedPreferences sharedPreferences = context.getSharedPreferences(\n                \"osmdroid_preferences\",\n                Context.MODE_PRIVATE\n        );\n        Configuration.getInstance().load(context, sharedPreferences);\n        Configuration.getInstance().setUserAgentValue(context.getPackageName());\n\n        // load fragments for navigation\n        createEvent = new CreateEventFragment();\n        userEvents = new UserEventsFragment();\n        userProfile = new UserProfileFragment();\n        notifications = new NotificationsFragment();\n\n        // set up nav-bar\n        bottomNav = findViewById(R.id.bottom_nav_view);\n\n        usersDB = new UsersDB();\n\n        String androidID = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);\n\n        usersDB.getUser(androidID, new OnSuccessListener<User>() {\n            @Override\n            public void onSuccess(User user) {\n                if (user != null) {\n                    checkUserRole(user);\n                    setupNavBar(user.getRoles());\n                    bottomNav.setVisibility(View.VISIBLE);\n\n                    // Display the UserHomepageFragment\n                    UserHomepageFragment frag = new UserHomepageFragment(user.getUserName(), user.getProfilePhotoPath());\n                    getSupportFragmentManager()\n                            .beginTransaction()\n                            .replace(R.id.fragment_frame, frag) // Ensure R.id.fragment_frame is the container\n                            .commit();\n                } else {\n                    bottomNav.setVisibility(View.GONE);\n                    user = new User();\n                    user.setAndroidId(androidID);\n                    usersDB.addUser(androidID, user);\n                    SelectRolesFragment frag = new SelectRolesFragment(user.getRoles());\n                    User finalUser = user;\n                    frag.setOnSuccessListener(new SelectRolesFragment.onSuccessListener() {\n                        @Override\n                        public void onSuccess(Roles roles) {\n                            usersDB.setRoles(androidID, roles);\n                            setupNavBar(roles);\n                            // Refresh the StartUpFragment\n                            refreshStartupFragment(androidID, finalUser, usersDB);\n\n                        }\n                    });\n                    frag.show(getSupportFragmentManager(), \"Create New User\");\n\n                    // Display the StartUpFragment\n                    StartUpFragment startfrag = new StartUpFragment(androidID, user, usersDB);\n                    getSupportFragmentManager()\n                            .beginTransaction()\n                            .replace(R.id.fragment_frame, startfrag) // Ensure R.id.fragment_frame is the container\n                            .commit();\n                }\n            }\n        }, e -> Log.w(\"Firebase\", \"Error getting user\", e));\n\n        // start notification handler\n        notificationHandler = new NotificationHandler(MainActivity.this, androidID);\n    }\n\n    /**\n     * check if the user has the admin role and navigate to AdminModeActivity if true\n     * @param user\n     *  user to check for admin role\n     */\n    private void checkUserRole(User user) {\n        if (user.getRoles().isAdmin()) {\n            if (user.getRoles().isOrganizer() || user.getRoles().isEntrant()){\n                return;\n            } else {\n                Intent intent = new Intent(this, AdminModeActivity.class);\n                startActivity(intent);\n                finish();\n            }\n        }\n    }\n\n    /**\n     * function to properly set up navbar on load\n     * @param roles\n     *  a given user's roles\n     */\n    private void setupNavBar(Roles roles) {\n        bottomNav.setOnItemSelectedListener(new BottomNavigationView.OnItemSelectedListener() {\n            @Override\n            public boolean onNavigationItemSelected(@NonNull MenuItem item) {\n                if (item.getItemId() == R.id.navigation_user_profile) {\n                    getSupportFragmentManager()\n                            .beginTransaction()\n                            .replace(R.id.fragment_frame, userProfile)\n                            .commit();\n                    return true;\n                } else if (item.getItemId() == R.id.navigation_create_events) {\n                    getSupportFragmentManager()\n                            .beginTransaction()\n                            .replace(R.id.fragment_frame, createEvent)\n                            .commit();\n                    return true;\n                } else if (item.getItemId() == R.id.navigation_notifications) {\n                    getSupportFragmentManager()\n                            .beginTransaction()\n                            .replace(R.id.fragment_frame, notifications)\n                            .commit();\n                    return true;\n                } else if (item.getItemId() == R.id.navigation_user_events) {\n                    getSupportFragmentManager()\n                            .beginTransaction()\n                            .replace(R.id.fragment_frame, userEvents)\n                            .commit();\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        Menu menu = bottomNav.getMenu();\n        if (!roles.isEntrant()) {\n            // if not entrant, don't show user events\n            menu.findItem(R.id.navigation_user_events).setVisible(false);\n        }\n        if (!roles.isOrganizer()) {\n            // if not organizer, don't show create events\n            menu.findItem(R.id.navigation_create_events).setVisible(false);\n        }\n    }\n\n    private void refreshStartupFragment(String AndroidId, User user, UsersDB userdb) {\n\n        // Display the StartUpFragment\n        StartUpFragment startfrag = new StartUpFragment(AndroidId, user, usersDB);\n        getSupportFragmentManager()\n                .beginTransaction()\n                .replace(R.id.fragment_frame, startfrag) // Ensure R.id.fragment_frame is the container\n                .commit();\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/MainActivity.java b/app/src/main/java/com/example/rocket_launch/MainActivity.java
--- a/app/src/main/java/com/example/rocket_launch/MainActivity.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/MainActivity.java	(date 1733121085685)
@@ -29,6 +29,7 @@
 
 /**
  * main activity that gets loaded on startup
+ * Authors: Rachel, Nathan, Griffin, Kaiden
  */
 public class MainActivity extends AppCompatActivity {
     UsersDB usersDB;
@@ -38,8 +39,6 @@
     UserEventsFragment userEvents;
     UserProfileFragment userProfile;
     NotificationsFragment notifications;
-
-
     NotificationHandler notificationHandler;
 
 
@@ -204,6 +203,13 @@
         }
     }
 
+    /**
+     * Refreshes the startup fragment if user chooses the organizer role
+     * @param AndroidId Android ID of user
+     * @param user  Current User object
+     * @param userdb    Current userdb object
+     * Author: Nathan
+     */
     private void refreshStartupFragment(String AndroidId, User user, UsersDB userdb) {
 
         // Display the StartUpFragment
Index: app/src/main/java/com/example/rocket_launch/nav_fragments/CreateEventFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch.nav_fragments;\n\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ListView;\nimport android.widget.Toast;\n\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport com.example.rocket_launch.Event;\nimport com.example.rocket_launch.EventArrayAdapter;\nimport com.example.rocket_launch.EventsDB;\nimport com.example.rocket_launch.R;\nimport com.example.rocket_launch.UsersDB;\nimport com.example.rocket_launch.organizer_events_tab.CreateNewEventFragment;\nimport com.example.rocket_launch.organizer_events_tab.CreatedEventDetailsFragment;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\n\nimport java.util.ArrayList;\n\n/**\n * fragment used for displaying events created by an organizer\n */\npublic class CreateEventFragment extends Fragment {\n    FloatingActionButton addNewEventButton;\n    private EventsDB eventsDB;\n    private UsersDB usersDB;\n    private ListView listView;\n    private EventArrayAdapter adapter;\n    private ArrayList<Event> events;\n    private String androidID;\n\n    /**\n     * default constructor\n     */\n    public CreateEventFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_create_event, container, false);\n\n        //Setting up list view and eventDB\n        listView = view.findViewById(R.id.organizer_created_events_list);\n        eventsDB = new EventsDB();\n        usersDB = new UsersDB();\n        adapter = new EventArrayAdapter(requireContext(), events);\n        listView.setAdapter(adapter);\n        fetchEvents();\n\n        //clicking on a event\n        listView.setOnItemClickListener((parent, itemView, position, id) -> {\n            Event clickedEvent = events.get(position);\n\n            CreatedEventDetailsFragment clickedEventDetailsFragment = new CreatedEventDetailsFragment(clickedEvent);\n\n            openClickedEvent(clickedEventDetailsFragment);\n        });\n\n        //Set up button to open CreateNewEventFragment\n        addNewEventButton = view.findViewById(R.id.add_new_event_button);\n        addNewEventButton.setOnClickListener(v -> {\n            openCreateNewEventFragment();\n        });\n\n        return view;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        androidID = Settings.Secure\n                .getString(requireContext().getContentResolver(), Settings.Secure.ANDROID_ID);\n        events = new ArrayList<>();\n\n        //TODO:\n        // - View Entrant map\n    }\n\n    /**\n     * function used for opening a fragment for organizer to create an event\n     */\n    private void openCreateNewEventFragment(){\n        CreateNewEventFragment createNewEventFragment = new CreateNewEventFragment();\n\n        requireActivity().getSupportFragmentManager()\n                .beginTransaction()\n                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                .replace(R.id.fragment_frame, createNewEventFragment)\n                .addToBackStack(\"\")\n                .commit();\n    }\n\n    /**\n     * function used for opening a fragment to display contents of an event\n     * @param clickedEventDetailsFragment\n     *  fragment that displays information needed to create an event\n     */\n    private void openClickedEvent(CreatedEventDetailsFragment clickedEventDetailsFragment){\n        requireActivity().getSupportFragmentManager()\n                .beginTransaction()\n                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                .replace(R.id.fragment_frame, clickedEventDetailsFragment)\n                .addToBackStack(null)\n                .commit();\n    }\n\n    /**\n     * function that fetches all events created by an organizer and loads them\n     */\n    private void fetchEvents() {\n        usersDB.getCreatedEventIds(androidID, eventTitleList -> {\n            FirebaseFirestore db = FirebaseFirestore.getInstance();\n\n            eventsDB.getAllEventsInList(eventTitleList, eventList -> {\n                events.clear(); // Clear the old list\n\n                for (Event event : eventList) {\n                    if (event != null) {\n                        events.add(event); // Add the event to the list\n                        Log.d(\"FetchEvents\", \"Event: \" + event.getName() + \", Poster URL: \" + event.getPosterUrl());\n                    }\n                }\n\n                adapter.notifyDataSetChanged(); // Notify the adapter of changes\n            }, e -> {\n                Log.e(\"FetchEvents\", \"Error fetching events from events_dev collection\", e);\n                Toast.makeText(requireContext(), \"Failed to load events\", Toast.LENGTH_SHORT).show();\n            });\n\n        }, e -> Log.e(\"FetchEvents\", \"Error fetching event IDs\", e));\n    }\n\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/nav_fragments/CreateEventFragment.java b/app/src/main/java/com/example/rocket_launch/nav_fragments/CreateEventFragment.java
--- a/app/src/main/java/com/example/rocket_launch/nav_fragments/CreateEventFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/nav_fragments/CreateEventFragment.java	(date 1733121085699)
@@ -26,7 +26,8 @@
 import java.util.ArrayList;
 
 /**
- * fragment used for displaying events created by an organizer
+ * Fragment used for displaying events created by an organizer
+ * Author: Rachel
  */
 public class CreateEventFragment extends Fragment {
     FloatingActionButton addNewEventButton;
Index: app/src/main/java/com/example/rocket_launch/QRCodesDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\nimport android.util.Log;\n\nimport com.google.android.gms.tasks.OnFailureListener;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.firebase.firestore.CollectionReference;\nimport com.google.firebase.firestore.DocumentReference;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\n\n/**\n * handles all database queries related to QR Codes\n * Author: kaiden\n */\npublic class QRCodesDB {\n    private FirebaseFirestore db;\n    private CollectionReference qRRef;\n\n    private EventsDB eventsDB;\n\n    public QRCodesDB() {\n        db = FirebaseFirestore.getInstance();\n        qRRef = db.collection(\"QRCodes\");  // Reference the collection\n\n        eventsDB = new EventsDB(); // load eventsDB so we can update event's qr code\n    }\n\n    /**\n     * loads an event given a QR code\n     * Author: kaiden\n     * @param code\n     *  QR code in which to load\n     * @param success\n     *  callback for if event exists and firestore retreives it\n     * @param failure\n     *  callback for any failure\n     */\n    public void loadEventId(String code, OnSuccessListener<String> success, OnFailureListener failure) {\n        qRRef.document(code).get()\n                .addOnSuccessListener(documentSnapshot -> {\n                    if (documentSnapshot.exists()) {\n                        String eventId = (String) documentSnapshot.get(\"eventId\");\n                        success.onSuccess(eventId);\n                    } else {\n                        failure.onFailure(new Exception(\"Invalid id\"));\n                    }\n                })\n                .addOnFailureListener(e -> Log.e(\"error loading from database\", \"error\", e));\n    }\n\n    public void loadCode(String code, OnSuccessListener<Event> success) {\n        // try to load from database\n        qRRef.document(code).get()\n                .addOnSuccessListener(documentSnapshot -> {\n                    // if we successfully find teh code in the database\n                    if (documentSnapshot.exists()) {\n                        String eventId = (String) documentSnapshot.get(\"eventId\");\n\n                        // try to load the corresponding event\n                        eventsDB.loadEvent(eventId, success); // pass on success to events db\n                    }\n                })\n                .addOnFailureListener(e -> Log.e(\"error loading from database\", \"error\", e));\n    }\n\n    /**\n     * loads all qr codes and adds them to a List of Strings supplied in onSuccessListener\n     * Author: kaiden\n     * @param onSuccessListener\n     *  callback used to pass data from firestore load\n     */\n    public void loadAll(OnSuccessListener<List<String>> onSuccessListener) {\n        qRRef.get().addOnSuccessListener(queryDocumentSnapshots -> {\n            List<String> codes = new ArrayList<>();\n            for (QueryDocumentSnapshot document : queryDocumentSnapshots) {\n                codes.add(document.getId());\n            }\n            onSuccessListener.onSuccess(codes);\n        }).addOnFailureListener(e -> {\n            Log.e(\"loadAll\", \"Failed to load QR Codes\", e);\n        });\n    }\n\n    /**\n     * adds a new QR code to QRCode database\n     * Author: kaiden\n     * @param eventId\n     *  id of event to add\n     * @param onSuccess\n     *  callback for success, is passed new QR code's ID for storage in an event\n     * @param onFailure\n     *  callback if a failure occurs\n     */\n    public void addCode(String eventId, OnSuccessListener<String> onSuccess, OnFailureListener onFailure) {\n        eventsDB.loadEvent(eventId, event -> {\n            if (event != null) {\n                DocumentReference newQRRef = qRRef.document();\n                event.setQRCode(newQRRef.getId()); // add code ID to event eventId\n                eventsDB.updateEvent(eventId, event, l -> {}, f -> {});\n                HashMap<String, String> data = new HashMap<>();\n                data.put(\"eventId\", eventId);\n                newQRRef.set(data)\n                        .addOnSuccessListener(l -> {\n                            onSuccess.onSuccess(newQRRef.getId());\n                        })\n                        .addOnFailureListener(onFailure);\n            } else {\n                Log.w(\"QRCode\", \"error adding code: event is is null\");\n            }\n        });\n    }\n\n    public void removeCode(String code, String eventId, OnSuccessListener<Void> onSuccess, OnFailureListener onFailure) {\n        eventsDB.loadEvent(eventId, event -> {\n            if (event != null) {\n                qRRef.document(code).delete() // delete qr code in QR database\n                        .addOnSuccessListener(l -> {\n                            event.setQRCode(\"\"); // remove code to event eventId\n                            onSuccess.onSuccess(null);\n                        })\n                        .addOnFailureListener(onFailure);\n            }\n        });\n    }\n\n    /**\n     * removes a QR code from firestore database\n     * Author: kaiden\n     * @param code\n     *  QR code in which to remove\n     * @param onSuccess\n     *  callback for a successful removal\n     */\n    private void removeCodeFromDatabase(String code, OnSuccessListener<Void> onSuccess) {\n        qRRef.document(code).delete() // delete qr code in QR database\n                .addOnSuccessListener(l -> {\n                    onSuccess.onSuccess(null);\n                })\n                .addOnFailureListener(e -> Log.e(\"error removing from database\", \"error\", e));\n    }\n\n\n    /**\n     * regenerates the QR code and updates the event, eventsDB and qr codes database\n     * Author: kaiden\n     * @param code\n     *  QR code string of which we wish to update\n     * @param eventId\n     *  should not be required, refactoring ahead :(\n     * @param onSuccess\n     *  passes the on string as a parameter so we can redisplay proper data\n     * @param onFailure\n     *  is called if we encounter a failure\n     */\n    public void reGenerateCode(String code, String eventId, OnSuccessListener<String> onSuccess, OnFailureListener onFailure) {\n        eventsDB.loadEvent(eventId, event -> {\n            if (event != null) {\n                DocumentReference newQRRef = qRRef.document();\n                event.setQRCode(newQRRef.getId()); // add code ID to event eventId\n                eventsDB.updateEvent(eventId, event, l -> {}, l -> {});\n                HashMap<String, String> data = new HashMap<>();\n                data.put(\"eventId\", eventId);\n                newQRRef.set(data)\n                        .addOnSuccessListener(l -> {\n                            // if we successfully add a new one, remove the old (code)\n                            removeCodeFromDatabase(code, j -> {\n                                onSuccess.onSuccess(event.getQRCode());\n                            });\n                        })\n                        .addOnFailureListener(onFailure);\n            }\n        });\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/QRCodesDB.java b/app/src/main/java/com/example/rocket_launch/QRCodesDB.java
--- a/app/src/main/java/com/example/rocket_launch/QRCodesDB.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/QRCodesDB.java	(date 1733121085624)
@@ -54,6 +54,11 @@
                 .addOnFailureListener(e -> Log.e("error loading from database", "error", e));
     }
 
+    /**
+     * Loads code from database
+     * @param code Code
+     * @param success OnSuccess listener
+     */
     public void loadCode(String code, OnSuccessListener<Event> success) {
         // try to load from database
         qRRef.document(code).get()
Index: app/src/main/java/com/example/rocket_launch/EntrantLocationData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\n\n/**\n * Class that creates an object to store entrant name and coordinates\n * to store in a list in the Event Class for mapView implementation\n * Author: Rachel\n */\npublic class EntrantLocationData {\n    private String entrantID;\n    private double entrantLatitude;\n    private double entrantLongitude;\n\n    public EntrantLocationData(){\n\n    }\n\n    public EntrantLocationData(String entrantID, double latitude, double longitude){\n        this.entrantID = entrantID;\n        this.entrantLatitude = latitude;\n        this.entrantLongitude = longitude;\n    }\n\n    //Use entrantID to get entrant name in the map options entrant list\n    public String getEntrantID(){return entrantID;}\n    public double getEntrantLatitude(){return entrantLatitude;}\n    public double getEntrantLongitude(){return entrantLongitude;}\n\n    public void setEntrantID(String entrantID){this.entrantID = entrantID;}\n    public void setEntrantLatitude(double entrantLatitude){this.entrantLatitude = entrantLatitude;}\n    public void setEntrantLongitude(double entrantLongitude){this.entrantLongitude = entrantLongitude;}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/EntrantLocationData.java b/app/src/main/java/com/example/rocket_launch/EntrantLocationData.java
--- a/app/src/main/java/com/example/rocket_launch/EntrantLocationData.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/EntrantLocationData.java	(date 1733121085639)
@@ -15,6 +15,12 @@
 
     }
 
+    /**
+     * Constructor for Entrant location data
+     * @param entrantID Gets the ID of the entrant
+     * @param latitude  Gets the entrant's latitude
+     * @param longitude Gets the entrant's longitude
+     */
     public EntrantLocationData(String entrantID, double latitude, double longitude){
         this.entrantID = entrantID;
         this.entrantLatitude = latitude;
@@ -26,6 +32,7 @@
     public double getEntrantLatitude(){return entrantLatitude;}
     public double getEntrantLongitude(){return entrantLongitude;}
 
+    // Setter methods
     public void setEntrantID(String entrantID){this.entrantID = entrantID;}
     public void setEntrantLatitude(double entrantLatitude){this.entrantLatitude = entrantLatitude;}
     public void setEntrantLongitude(double entrantLongitude){this.entrantLongitude = entrantLongitude;}
Index: app/src/main/java/com/example/rocket_launch/nav_fragments/UserProfileFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch.nav_fragments;\n\nimport android.content.Intent;\nimport android.graphics.Bitmap;\nimport android.graphics.BitmapFactory;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.Typeface;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.constraintlayout.widget.ConstraintLayout;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport com.bumptech.glide.Glide;\nimport com.bumptech.glide.request.transition.Transition;\nimport com.example.rocket_launch.EditProfileFragment;\nimport com.example.rocket_launch.FeedbackFormFragment;\nimport com.example.rocket_launch.R;\nimport com.example.rocket_launch.Roles;\nimport com.example.rocket_launch.User;\nimport com.example.rocket_launch.UsersDB;\nimport com.example.rocket_launch.admin.AdminModeActivity;\nimport com.google.android.gms.tasks.OnSuccessListener;\nimport com.google.firebase.firestore.DocumentSnapshot;\nimport com.google.firebase.firestore.FirebaseFirestore;\nimport com.google.firebase.firestore.QueryDocumentSnapshot;\n\nimport org.checkerframework.checker.nullness.qual.Nullable;\n\n/**\n * fragment for displaying all user profile information\n */\npublic class UserProfileFragment extends Fragment {\n\n    private static final String TAG = \"UserProfileFragment\";\n    // user data\n    private UsersDB usersDB;\n    private String androidId;\n    private User user;\n\n    // user interface items\n    private TextView nameTextView;\n    private TextView emailTextView;\n    private TextView phoneTextView;\n    private TextView facilityTextView;\n    private TextView facilityAddressTextView;\n    private LinearLayout facilityLayout;\n    private LinearLayout facilityAddressLayout;\n    private ConstraintLayout profileBodyView;\n    private ConstraintLayout editProfileAndFeedbackView;\n    private ImageView profileImageView;\n    private ImageView profilePictureView;\n    private ImageButton adminActivityButton;\n\n    // Navigate to feedback from\n    private Button feedbackButton;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_user_profile, container, false);\n\n        profileBodyView = view.findViewById(R.id.user_profile_body);\n        editProfileAndFeedbackView = view.findViewById(R.id.edit_profile_and_feedback);\n        nameTextView = view.findViewById(R.id.user_name_textview);\n        emailTextView = view.findViewById(R.id.user_email_textview);\n        phoneTextView = view.findViewById(R.id.user_phone_textview);\n        facilityTextView = view.findViewById(R.id.user_facility_textview);\n        facilityAddressTextView = view.findViewById(R.id.user_facility_address_textview);\n        profilePictureView = view.findViewById(R.id.profile_picture_display);\n        facilityLayout = view.findViewById(R.id.display_profile_facility);\n        facilityAddressLayout = view.findViewById(R.id.display_profile_facility_address);\n        adminActivityButton = view.findViewById(R.id.admin_activity_button);\n\n        // Set up \"Edit Profile\" button listener\n        Button editProfileButton = view.findViewById(R.id.edit_profile_button);\n        editProfileButton.setOnClickListener(v -> {\n\n            // Hide the profile body and transition to EditProfileFragment\n            profileBodyView.setVisibility(View.GONE);\n            editProfileAndFeedbackView.setVisibility(View.GONE);\n\n            openEditProfileFragment();\n        });\n\n        //go to admin mode\n        adminActivityButton.setOnClickListener(v -> {\n            Intent intent = new Intent(getActivity(), AdminModeActivity.class);\n            startActivity(intent);\n            getActivity().finish();\n        });\n\n        // Set up \"Give Feedback\"\n        Button feedbackButton = view.findViewById(R.id.feedback_form_button);\n        feedbackButton.setOnClickListener(v -> {\n            FeedbackFormFragment frag  = new FeedbackFormFragment(this.androidId);\n            requireActivity().getSupportFragmentManager()\n                    .beginTransaction()\n                    .replace(R.id.fragment_frame, frag) // Ensure R.id.fragment_frame is the container\n                    .commit();\n        });\n\n        fetchUserProfile();\n\n        return view;\n    }\n\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Initialize Firestore\n        usersDB = new UsersDB();\n        androidId = Settings.Secure.getString(requireContext().getContentResolver(), Settings.Secure.ANDROID_ID);\n    }\n\n    /**\n     * opens a fragment used for editing contents of a user's profile\n     */\n    private void openEditProfileFragment() {\n        Bundle bundle = new Bundle();\n        bundle.putString(\"androidID\", androidId);\n\n        EditProfileFragment editProfileFragment = new EditProfileFragment();\n        editProfileFragment.setArguments(bundle);\n\n        requireActivity().getSupportFragmentManager()\n                .beginTransaction()\n                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                .replace(R.id.edit_profile_fragment_container, editProfileFragment)\n                .commit();\n    }\n\n    /**\n     * function that gets and displays all contents of a user's profile\n     */\n    private void fetchUserProfile() {\n        usersDB.getUser(androidId, new OnSuccessListener<User>() {\n            @Override\n            public void onSuccess(User newUser) {\n                user = newUser;\n                if (user.getRoles() != null && user.getRoles().isOrganizer()) {\n                    facilityLayout.setVisibility(View.VISIBLE);\n                    facilityAddressLayout.setVisibility(View.VISIBLE);\n                    facilityTextView.setText(user.getUserFacility());\n                    facilityAddressTextView.setText(user.getUserFacilityAddress());\n                }\n                if (user.getRoles().isAdmin()){\n                    adminActivityButton.setVisibility(View.VISIBLE);\n                } else {\n                    adminActivityButton.setVisibility(View.GONE);\n                }\n\n                nameTextView.setText(user.getUserName());\n                emailTextView.setText(user.getUserEmail());\n                phoneTextView.setText(user.getUserPhoneNumber());\n\n                if (user.getProfilePhotoPath() != null && !user.getProfilePhotoPath().isEmpty()) {\n                    loadProfileImage(user.getProfilePhotoPath());\n                } else {\n                    setDefaultProfilePicture(user.getUserName());\n                }\n            }\n        }, e -> Log.e(TAG, \"No matching document found or task failed\", e));\n    }\n\n    /**\n     * function that loads a user's profile photo\n     * @param imagePath\n     *  path to profile photo in database\n     */\n    private void loadProfileImage(String imagePath) {\n        Glide.with(this)\n                .load(imagePath)\n                .into(new com.bumptech.glide.request.target.CustomTarget<Drawable>() {\n                    @Override\n                    public void onResourceReady(@NonNull Drawable resource, @Nullable Transition<? super Drawable> transition) {\n                        profilePictureView.setImageDrawable(resource); // Set the loaded image to the ImageView\n                    }\n\n                    @Override\n                    public void onLoadFailed(@Nullable Drawable errorDrawable) {\n                        // If the image fails to load, generate a default profile picture\n                        setDefaultProfilePicture(user.getUserName());\n                    }\n\n                    @Override\n                    public void onLoadCleared(@Nullable Drawable placeholder) {\n                        // Handle if the image resource needs to be cleared (optional)\n                        setDefaultProfilePicture(user.getUserName());\n                    }\n                });\n    }\n\n    private void setDefaultProfilePicture(String userName) {\n        // Default background color and text settings\n        int width = 200;  // Width of the Bitmap\n        int height = 200; // Height of the Bitmap\n        int textColor = Color.BLACK;\n        float textSize = 80f;\n\n        // Load the background image (new_image) from resources\n        Bitmap backgroundBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.new_image);\n        Bitmap scaledBackground = Bitmap.createScaledBitmap(backgroundBitmap, width, height, false);\n\n        // Create a new Bitmap and Canvas to draw\n        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n        Canvas canvas = new Canvas(bitmap);\n\n        // Draw the background image\n        canvas.drawBitmap(scaledBackground, 0, 0, null);\n\n        // Set up Paint for the text\n        Paint paint = new Paint();\n        paint.setColor(textColor);\n        paint.setTextSize(textSize);\n        paint.setTextAlign(Paint.Align.CENTER);\n\n        // Use a premium built-in font (example: sans-serif-medium)\n        paint.setTypeface(Typeface.create(\"serif\", Typeface.NORMAL));\n\n        // Draw the first letter of the user's name\n        if (userName != null && !userName.isEmpty()) {\n            String firstLetter = userName.substring(0, 1).toUpperCase();\n            Paint.FontMetrics fontMetrics = paint.getFontMetrics();\n            float x = width / 2f;\n            float y = (height / 2f) - ((fontMetrics.ascent + fontMetrics.descent) / 2f);\n            canvas.drawText(firstLetter, x, y, paint);\n        }\n\n        // Set the final Bitmap to the ImageView\n        profilePictureView.setImageBitmap(bitmap);\n    }\n\n\n    /**\n     * function used to update user interface if change occurred\n     */\n    private void updateUI() {\n        // Set the user details\n        nameTextView.setText(user.getUserName());\n        emailTextView.setText(user.getUserEmail());\n        phoneTextView.setText(user.getUserPhoneNumber());\n\n        // Display facility if user is an organizer\n        if (user.getRoles() != null && user.getRoles().isOrganizer()) {\n            facilityLayout.setVisibility(View.VISIBLE);\n            facilityTextView.setText(user.getUserFacility());\n\n            facilityAddressLayout.setVisibility(View.VISIBLE);\n            facilityAddressTextView.setText(user.getUserFacilityAddress());\n        } else {\n            facilityLayout.setVisibility(View.GONE);\n            facilityAddressLayout.setVisibility(View.GONE);\n        }\n\n        // Load profile picture using Glide\n        if (user.getProfilePhotoPath() != null && !user.getProfilePhotoPath().isEmpty()) {\n            Glide.with(this)\n                    .load(user.getProfilePhoto())\n                    .placeholder(R.drawable.default_image) // Optional placeholder image\n                    .error(R.drawable.default_image) // Optional error image\n                    .into(profileImageView);\n        } else {\n            profileImageView.setImageResource(R.drawable.default_image); // Set default image if no path is found\n        }\n    }\n\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/nav_fragments/UserProfileFragment.java b/app/src/main/java/com/example/rocket_launch/nav_fragments/UserProfileFragment.java
--- a/app/src/main/java/com/example/rocket_launch/nav_fragments/UserProfileFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/nav_fragments/UserProfileFragment.java	(date 1733121085646)
@@ -45,6 +45,7 @@
 
 /**
  * fragment for displaying all user profile information
+ * Author: Rachel
  */
 public class UserProfileFragment extends Fragment {
 
@@ -208,6 +209,10 @@
                 });
     }
 
+    /**
+     * Generates and sets a default profile name for the user
+     * @param userName Gets the name of the user
+     */
     private void setDefaultProfilePicture(String userName) {
         // Default background color and text settings
         int width = 200;  // Width of the Bitmap
Index: app/src/main/java/com/example/rocket_launch/organizer_events_tab/CreateNewEventFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch.organizer_events_tab;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.text.Editable;\nimport android.text.TextWatcher;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.CheckBox;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport androidx.fragment.app.Fragment;\n\nimport com.bumptech.glide.Glide;\nimport com.example.rocket_launch.Event;\nimport com.example.rocket_launch.EventsDB;\nimport com.example.rocket_launch.ImageStorageDB;\nimport com.example.rocket_launch.NotificationHelper;\nimport com.example.rocket_launch.R;\nimport com.google.firebase.firestore.FirebaseFirestore;\n\nimport java.util.UUID;\n\n/**\n * Fragment displayed to an organizer when they want to create an event.\n */\npublic class CreateNewEventFragment extends Fragment {\n    private EventsDB eventsDB;\n    private String androidId;\n\n    private EditText editEventName;\n    private EditText editEventCapacity;\n    private EditText editWaitlistLimitSize;\n    private EditText editEventDescription;\n    private CheckBox checkBoxGeolocationRequired;\n    private CheckBox checkBoxWaitlistLimit;\n    private TextView eventNameOverlay;\n    private ImageView editEventPosterView;\n    private Event event;\n\n    private static final int PICK_IMAGE_REQUEST = 1;\n\n    /**\n     * Default constructor.\n     */\n    public CreateNewEventFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        eventsDB = new EventsDB();\n        androidId = Settings.Secure.getString(requireContext().getContentResolver(), Settings.Secure.ANDROID_ID);\n        event = new Event();\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.create_new_event_fragment, container, false);\n\n        // Initialize views\n        editEventName = view.findViewById(R.id.edit_event_name);\n        editEventCapacity = view.findViewById(R.id.edit_event_capacity);\n        editWaitlistLimitSize = view.findViewById(R.id.edit_waitlist_limit_size);\n        editEventDescription = view.findViewById(R.id.edit_event_description);\n        checkBoxGeolocationRequired = view.findViewById(R.id.checkbox_geolocation_requirement);\n        checkBoxWaitlistLimit = view.findViewById(R.id.checkbox_waitlist_limit);\n        eventNameOverlay = view.findViewById(R.id.event_name_overlay);\n        editEventPosterView = view.findViewById(R.id.edit_event_poster_view);\n\n        // Hide waitlist limit size EditText unless checkbox is checked\n        editWaitlistLimitSize.setVisibility(View.INVISIBLE);\n\n        checkBoxWaitlistLimit.setOnCheckedChangeListener((buttonView, isChecked) -> {\n            if (isChecked) {\n                editWaitlistLimitSize.setVisibility(View.VISIBLE);\n            } else {\n                editWaitlistLimitSize.setVisibility(View.INVISIBLE);\n                editWaitlistLimitSize.setText(\"\"); // Clear any text if deselected\n            }\n        });\n\n        editEventName.addTextChangedListener(new TextWatcher() {\n            @Override\n            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}\n\n            @Override\n            public void onTextChanged(CharSequence s, int start, int before, int count) {\n                eventNameOverlay.setText(s);\n            }\n\n            @Override\n            public void afterTextChanged(Editable s) {}\n        });\n\n        // Initialize buttons\n        ImageButton cancelButton = view.findViewById(R.id.cancel_create_new_event_button);\n        cancelButton.setOnClickListener(v -> closeFragment());\n\n        ImageButton addEventPosterButton = view.findViewById(R.id.add_event_poster_button);\n        addEventPosterButton.setOnClickListener(v -> openImagePicker());\n\n        Button createEventButton = view.findViewById(R.id.create_event_button);\n        createEventButton.setOnClickListener(v -> {\n            String capacityInput = editEventCapacity.getText().toString().trim();\n\n            if (capacityInput.isEmpty()) {\n                editEventCapacity.setError(\"Capacity cannot be empty\");\n            } else {\n                try {\n                    int capacityInt = Integer.parseInt(capacityInput);\n                    createEvent();\n                    sendEventNotification(androidId);\n                } catch (NumberFormatException e) {\n                    editEventCapacity.setError(\"Enter a valid Integer\");\n                }\n            }\n        });\n\n        return view;\n    }\n\n    private void openImagePicker() {\n        Intent intent = new Intent();\n        intent.setType(\"image/*\");\n        intent.setAction(Intent.ACTION_GET_CONTENT);\n        startActivityForResult(Intent.createChooser(intent, \"Select Picture\"), PICK_IMAGE_REQUEST);\n    }\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        if (requestCode == PICK_IMAGE_REQUEST && resultCode == Activity.RESULT_OK && data != null && data.getData() != null) {\n            Uri imageUri = data.getData();\n            Glide.with(requireContext())\n                    .load(imageUri)\n                    .placeholder(R.drawable.sample_poster)\n                    .centerCrop()\n                    .into(editEventPosterView);\n\n            uploadEventPoster(imageUri);\n        }\n    }\n\n    private void uploadEventPoster(Uri imageUri) {\n        String fileName = \"event_pictures/event_\" + System.currentTimeMillis() + \".jpg\";\n\n        // Use ImageStorageDB to upload the image\n        ImageStorageDB.uploadImage(imageUri, fileName,\n                downloadUrl -> {\n                    if (event.getEventID() == null) {\n                        // Generate an event ID if not already set\n                        String eventID = UUID.randomUUID().toString();\n                        event.setEventID(eventID);\n                    }\n                    saveImageUrlToEvent(downloadUrl); // Save the download URL\n                    if (isAdded()) {\n                        Toast.makeText(requireContext(), \"Image uploaded successfully!\", Toast.LENGTH_SHORT).show();\n                    }\n                },\n                e -> {\n                    if (isAdded()) {\n                        Toast.makeText(requireContext(), \"Failed to upload image: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\n                    }\n                });\n    }\n    private void saveImageUrlToEvent(String downloadUrl) {\n        if (event.getEventID() == null) {\n            Log.e(\"SaveImageUrl\", \"Event ID is null, cannot save poster URL.\");\n            if (isAdded()) {\n                Toast.makeText(requireContext(), \"Event ID is null. Cannot save poster.\", Toast.LENGTH_SHORT).show();\n            }\n            return;\n        }\n\n        event.setPosterUrl(downloadUrl); // Set the poster URL in the event object\n\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\n\n        db.collection(\"events_dev\").document(event.getEventID())\n                .set(event)\n                .addOnSuccessListener(aVoid -> {\n                    if (isAdded()) {\n                        Log.d(\"SaveImageUrl\", \"Poster URL saved successfully in events_dev: \" + downloadUrl);\n                        Toast.makeText(requireContext(), \"Event poster updated successfully!\", Toast.LENGTH_SHORT).show();\n                    }\n                })\n                .addOnFailureListener(e -> {\n                    Log.e(\"SaveImageUrl\", \"Failed to save poster URL: \" + e.getMessage());\n                    if (isAdded()) {\n                        Toast.makeText(requireContext(), \"Failed to save event poster: \" + e.getMessage(), Toast.LENGTH_SHORT).show();\n                    }\n                });\n    }\n\n    private void createEvent() {\n        String eventName = editEventName.getText().toString();\n        String eventCapacity = editEventCapacity.getText().toString();\n        String waitlistSizeLimit = checkBoxWaitlistLimit.isChecked() ? editWaitlistLimitSize.getText().toString() : null;\n\n        String eventDescription = editEventDescription.getText().toString();\n        boolean geolocationRequired = checkBoxGeolocationRequired.isChecked();\n\n        event.setName(eventName);\n        event.setCapacity(Integer.parseInt(eventCapacity));\n        event.setMaxWaitlistSize(waitlistSizeLimit != null ? Integer.parseInt(waitlistSizeLimit) : -1);\n        event.setDescription(eventDescription);\n        event.setGeolocationRequired(geolocationRequired);\n\n        String eventID = UUID.randomUUID().toString();\n        event.setEventID(eventID);\n\n        event.setOrganizer(androidId);\n\n        eventsDB.addCreatedEvent(event, androidId, v -> closeFragment());\n    }\n\n    private void closeFragment() {\n        requireActivity().getSupportFragmentManager().popBackStack();\n    }\n\n    private void sendEventNotification(String androidId) {\n        NotificationHelper.sendNotification(androidId, \"Event Created\", \"Your event has been successfully created!\");\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/organizer_events_tab/CreateNewEventFragment.java b/app/src/main/java/com/example/rocket_launch/organizer_events_tab/CreateNewEventFragment.java
--- a/app/src/main/java/com/example/rocket_launch/organizer_events_tab/CreateNewEventFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/organizer_events_tab/CreateNewEventFragment.java	(date 1733121085653)
@@ -131,6 +131,9 @@
         return view;
     }
 
+    /**
+     * Opens image picker
+     */
     private void openImagePicker() {
         Intent intent = new Intent();
         intent.setType("image/*");
@@ -153,6 +156,10 @@
         }
     }
 
+    /**
+     * Uploads event poster to firebase
+     * @param imageUri URI of image
+     */
     private void uploadEventPoster(Uri imageUri) {
         String fileName = "event_pictures/event_" + System.currentTimeMillis() + ".jpg";
 
@@ -175,6 +182,11 @@
                     }
                 });
     }
+
+    /**
+     * Saves image url to event
+     * @param downloadUrl URL of download
+     */
     private void saveImageUrlToEvent(String downloadUrl) {
         if (event.getEventID() == null) {
             Log.e("SaveImageUrl", "Event ID is null, cannot save poster URL.");
Index: app/src/main/res/layout/startup.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n\n    <androidx.core.widget.NestedScrollView\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"0dp\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        android:layout_margin=\"10dp\">\n\n        <androidx.constraintlayout.widget.ConstraintLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\">\n\n            <!--User Profile Header-->\n            <TextView\n                android:id=\"@+id/user_homepage_header\"\n                style=\"@style/ActivityHeaderStyle\"\n                android:text=\"@string/startup_page\"\n\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toTopOf=\"parent\" />\n\n            <TextView\n                android:id=\"@+id/Enter_user_info_startup\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"50dp\"\n                android:text=\"@string/enter_user_information\"\n                android:textAlignment=\"center\"\n                android:textSize=\"30sp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/user_homepage_header\" />\n\n            <LinearLayout\n                android:id=\"@+id/linearLayout\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"16dp\"\n                android:orientation=\"horizontal\"\n                android:padding=\"8dp\"\n                android:paddingBottom=\"8dp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/Enter_user_info_startup\">\n\n                <TextView\n                    style=\"@style/FragmentConstants\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"Name:\" />\n\n                <EditText\n                    android:id=\"@+id/edit_user_name\"\n                    style=\"@style/FragmentConstants\"\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\"\n                    android:hint=\"Enter Name\" />\n            </LinearLayout>\n\n            <LinearLayout\n                android:id=\"@+id/linearLayout3\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"16dp\"\n                android:orientation=\"horizontal\"\n                android:padding=\"8dp\"\n                android:paddingBottom=\"8dp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/linearLayout\">\n\n                <TextView\n                    style=\"@style/FragmentConstants\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"Email:\" />\n\n                <EditText\n                    android:id=\"@+id/edit_user_email\"\n                    style=\"@style/FragmentConstants\"\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\"\n                    android:inputType=\"textEmailAddress\"\n                    android:hint=\"Enter Email\" />\n            </LinearLayout>\n\n            <LinearLayout\n                android:id=\"@+id/linearLayout4\"\n                android:layout_width=\"match_parent\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"16dp\"\n                android:orientation=\"horizontal\"\n                android:padding=\"8dp\"\n                android:paddingBottom=\"8dp\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintHorizontal_bias=\"0.0\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/linearLayout3\">\n\n                <TextView\n                    style=\"@style/FragmentConstants\"\n                    android:layout_width=\"wrap_content\"\n                    android:layout_height=\"wrap_content\"\n                    android:text=\"Phone:\" />\n\n                <EditText\n                    android:id=\"@+id/edit_user_phone\"\n                    style=\"@style/FragmentConstants\"\n                    android:layout_width=\"0dp\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_weight=\"1\"\n                    android:hint=\"Enter Phone (optional)\" />\n\n            </LinearLayout>\n\n            <androidx.constraintlayout.widget.ConstraintLayout\n                android:id=\"@+id/organizer_startup_fields\"\n                android:layout_width=\"wrap_content\"\n                android:layout_height=\"wrap_content\"\n                android:layout_marginTop=\"24dp\"\n                android:visibility=\"gone\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\"\n                app:layout_constraintTop_toBottomOf=\"@+id/linearLayout4\">\n\n                <LinearLayout\n                    android:id=\"@+id/linearLayout5\"\n                    android:layout_width=\"408dp\"\n                    android:layout_height=\"65dp\"\n                    android:orientation=\"horizontal\"\n                    android:padding=\"8dp\"\n                    android:paddingBottom=\"8dp\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toTopOf=\"parent\">\n\n                    <TextView\n                        style=\"@style/FragmentConstants\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"User Facility:\" />\n\n                    <EditText\n                        android:id=\"@+id/edit_user_facility\"\n                        style=\"@style/FragmentConstants\"\n                        android:layout_width=\"0dp\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"1\"\n                        android:hint=\"Enter Facility\" />\n\n                </LinearLayout>\n\n                <LinearLayout\n                    android:id=\"@+id/linearLayout6\"\n                    android:layout_width=\"match_parent\"\n                    android:layout_height=\"wrap_content\"\n                    android:layout_marginTop=\"16dp\"\n                    android:orientation=\"horizontal\"\n                    android:padding=\"8dp\"\n                    android:paddingBottom=\"8dp\"\n                    app:layout_constraintBottom_toBottomOf=\"parent\"\n                    app:layout_constraintEnd_toEndOf=\"parent\"\n                    app:layout_constraintHorizontal_bias=\"0.0\"\n                    app:layout_constraintStart_toStartOf=\"parent\"\n                    app:layout_constraintTop_toBottomOf=\"@+id/linearLayout5\">\n\n                    <TextView\n                        style=\"@style/FragmentConstants\"\n                        android:layout_width=\"wrap_content\"\n                        android:layout_height=\"wrap_content\"\n                        android:text=\"Facility Address:\" />\n\n                    <EditText\n                        android:id=\"@+id/edit_user_facility_address\"\n                        style=\"@style/FragmentConstants\"\n                        android:layout_width=\"0dp\"\n                        android:layout_height=\"wrap_content\"\n                        android:layout_weight=\"1\"\n                        android:hint=\"Enter Facility Address\" />\n\n                </LinearLayout>\n            </androidx.constraintlayout.widget.ConstraintLayout>\n\n            <Button\n                android:id=\"@+id/startup_button\"\n                android:layout_width=\"162dp\"\n                android:layout_height=\"68dp\"\n                android:layout_marginVertical=\"25dp\"\n                android:text=\"Finish\"\n                android:textColor=\"@color/marian_blue\"\n                android:theme=\"@style/ButtonStyleA\"\n                app:layout_constraintTop_toBottomOf=\"@id/organizer_startup_fields\"\n                app:layout_constraintBottom_toBottomOf=\"parent\"\n                app:layout_constraintEnd_toEndOf=\"parent\"\n                app:layout_constraintStart_toStartOf=\"parent\" />\n        </androidx.constraintlayout.widget.ConstraintLayout>\n\n    </androidx.core.widget.NestedScrollView>\n\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/startup.xml b/app/src/main/res/layout/startup.xml
--- a/app/src/main/res/layout/startup.xml	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/res/layout/startup.xml	(date 1733121085659)
@@ -80,7 +80,7 @@
                     style="@style/FragmentConstants"
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:text="Email:" />
+                    android:text="Email: " />
 
                 <EditText
                     android:id="@+id/edit_user_email"
@@ -89,7 +89,8 @@
                     android:layout_height="wrap_content"
                     android:layout_weight="1"
                     android:inputType="textEmailAddress"
-                    android:hint="Enter Email" />
+                    android:hint="Enter Email"
+                    android:autofillHints="emailAddress"/>
             </LinearLayout>
 
             <LinearLayout
@@ -117,7 +118,8 @@
                     android:layout_width="0dp"
                     android:layout_height="wrap_content"
                     android:layout_weight="1"
-                    android:hint="Enter Phone (optional)" />
+                    android:hint="Enter Phone (optional)"
+                    android:autofillHints="phone"/>
 
             </LinearLayout>
 
Index: app/src/main/java/com/example/rocket_launch/Event.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.media.Image;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.TextView;\n\nimport androidx.annotation.NonNull;\n\nimport com.google.zxing.BarcodeFormat;\nimport com.google.zxing.WriterException;\nimport com.google.zxing.qrcode.QRCodeWriter;\n\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.List;\nimport java.util.Random;\n\n\npublic class Event {\n    private String eventID;\n    private String QRCode;\n    private String name;\n    private String description;\n    private int capacity;\n    private boolean geolocationRequired;\n    private Calendar startTime;\n    private Calendar endTime;\n    private int participants;\n    private Image photo;\n    private List<String> waitingList;\n    private List<String> invitedEntrants;\n    private List<String> cancelledEntrants;\n    private List<String> registeredEntrants;\n\n    private String posterUrl;\n    private List<EntrantLocationData> entrantLocationDataList;\n\n    private int maxWaitlistSize;// Integer\n    private List<Notification> notifications; // new notification list\n\n    private String organizer;\n\n\n    public Event(){\n        // verify lists appear in database -> ensures no access to undefined attribute\n        this.waitingList = new ArrayList<>();\n        this.cancelledEntrants = new ArrayList<>();\n        this.registeredEntrants = new ArrayList<>();\n        this.invitedEntrants = new ArrayList<>();\n\n        this.entrantLocationDataList = new ArrayList<>();\n\n        this.notifications = new ArrayList<>(); // initialize notification list\n\n        this.QRCode = \"\";\n    }\n\n    // ############################ //\n    public List<Notification> getNotifications() {\n        return notifications;\n    }\n\n    public void setNotifications(List<Notification> notifications) {\n        this.notifications = notifications;\n    }\n\n    public void addNotifications(List<Notification> notifications){\n        this.notifications = notifications;\n\n    }\n\n    // ############################ //\n\n\n    public void setEventID(String eventID){this.eventID = eventID;}\n    public void setName(String name){this.name = name;}\n    public void setDescription(String description){this.description = description;}\n    public void setCapacity(int capacity){this.capacity = capacity;}\n    public void setGeolocationRequired(boolean geolocationRequired){this.geolocationRequired = geolocationRequired;}\n    public void setStartTime(Calendar startTime){this.startTime = startTime;}\n    public void setEndTime(Calendar endTime){this.endTime = endTime;}\n    public void setParticipants(Integer participants) {\n        this.participants = (participants != null) ? participants : 0; // Default to 0 if participants is null\n    }\n\n    public void setPhoto(Image photo){this.photo = photo;}\n    public void setWaitingList(){this.waitingList = new ArrayList<>();}\n    public void setMaxWaitlistSize(int maxWaitlistSize){this.maxWaitlistSize = maxWaitlistSize;}\n\n    //For Entrant Location Data List\n    public void setEntrantLocationDataList(){this.entrantLocationDataList = new ArrayList<>();}\n    public void addToEntrantLocationDataList(EntrantLocationData entrantLocationData) {entrantLocationDataList.add(entrantLocationData);}\n    public List<EntrantLocationData> getEntrantLocationDataList(){return entrantLocationDataList;}\n    public void removeFromEntrantLocationDataList(EntrantLocationData entrantLocationData){entrantLocationDataList.remove(entrantLocationData);}\n\n    public int getMaxWaitlistSize() {\n        return maxWaitlistSize;\n    }\n\n    public void addToWaitingList(String userID){\n        waitingList.add(userID);\n    }\n\n    public void removeFromWaitingList(String userID) {waitingList.remove(userID);}\n\n    public List<String> getWaitingList() {\n        return waitingList;\n    }\n\n    public Image getPhoto() {\n        return photo;\n    }\n\n    public String getEventID() {\n        return eventID;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n    public String getPosterUrl() {\n        return posterUrl;\n    }\n\n    public void setPosterUrl(String posterUrl) {\n        this.posterUrl = posterUrl;\n    }\n\n    public int getCapacity() {return capacity;}\n\n    public boolean getGeolocationRequired() {return geolocationRequired;}\n\n    public Calendar getStartTime() {\n        return startTime;\n    }\n\n    public Calendar getEndTime() {\n        return endTime;\n    }\n\n    public int getParticipants() {\n        return participants;\n    }\n\n    public boolean canJoinWaitingList(){\n        return waitingList.size() < maxWaitlistSize;\n    }\n\n    public boolean acceptInvitation(String userID) {\n        return waitingList.contains(userID) && participants < capacity;\n    }\n\n    public void declineInvitation(String userID) {\n        removeFromWaitingList(userID);\n    }\n\n\n    public Bitmap generateQRCode() {\n        QRCodeWriter qrCodeWriter = new QRCodeWriter();\n        try {\n            int width = 500, height = 500;\n            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);\n\n            com.google.zxing.common.BitMatrix bitMatrix = qrCodeWriter.encode(getQRCode(), BarcodeFormat.QR_CODE, width, height);\n\n            // Convert the BitMatrix into a bitmap\n            for (int x = 0; x < width; x++) {\n                for (int y = 0; y < height; y++) {\n                    bitmap.setPixel(x, y, bitMatrix.get(x, y) ? android.graphics.Color.BLACK : android.graphics.Color.WHITE);\n                }\n            }\n            return bitmap;\n        } catch (WriterException e) {\n            Log.e(\"error creating qr code\", e.toString());\n        }\n        return null;\n    }\n\n    /**\n     * Author: Kaiden\n     * remove sampleAmount of users from waitlist and add them to invited list\n     * @param sampleAmount\n     *  (int) amount of entrants to remove and return\n     */\n    public List<String> sampleWaitlist(int sampleAmount) {\n        List<String> sampledUsers = new ArrayList<>();\n\n        if (sampleAmount <= capacity) {\n            Random rand = new Random();\n            // sample sampleAmount from waitlist\n            for (int i = 0; i < sampleAmount; i++) {\n                int index = rand.nextInt(waitingList.size());\n                \n                sampledUsers.add(waitingList.get(index)); // add to list to return\n                invitedEntrants.add(waitingList.get(index)); // add to invited entrants list\n                waitingList.remove(index); // remove from waiting list\n\n            }\n        }\n        return sampledUsers;\n    }\n\n    public String getQRCode() {\n        return QRCode;\n    }\n\n    public void setQRCode(String QRCode) {\n        this.QRCode = QRCode;\n    }\n\n\n    public List<String> getCancelledEntrants() {\n        return cancelledEntrants;\n    }\n\n    public void setCancelledEntrants(List<String> cancelledEntrants) {\n        this.cancelledEntrants = cancelledEntrants;\n    }\n\n    public List<String> getregisteredEntrants() {\n        return registeredEntrants;\n    }\n\n    public void setregisteredEntrants(List<String> registeredEntrants) {\n        this.registeredEntrants = registeredEntrants;\n    }\n\n    public List<String> getInvitedEntrants() {\n        return invitedEntrants;\n    }\n\n    public void setInvitedEntrants(List<String> invitedEntrants) {\n        this.invitedEntrants = invitedEntrants;\n    }\n\n    public String getOrganizer() {\n        return organizer;\n    }\n\n    public void setOrganizer(String organizer) {\n        this.organizer = organizer;\n    }\n\n    public static class UserArrayAdapter extends ArrayAdapter<User> {\n\n        /**\n         * constructor\n         * @param context\n         *  context of where fragment is\n         * @param users\n         *  users list to display\n         */\n        public UserArrayAdapter(Context context, ArrayList<User> users) {\n            super(context,0,users);\n        }\n\n        /**\n         * get current view\n         * @param position\n         *  position in array\n         * @param convertView\n         *  view to convert to\n         * @param parent\n         *  parent display\n         * @return\n         *  returns a view to display\n         */\n        @NonNull\n        public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n            User user = getItem(position);\n\n            if (convertView == null) {\n                convertView = LayoutInflater.from(getContext()).inflate(R.layout.event_list_content, parent, false);\n            }\n\n            TextView userName = convertView.findViewById(R.id.list_event_name);\n\n            assert user != null;\n            userName.setText(user.getUserName());\n\n            return convertView;\n        }\n    }\n\n    /**\n     * checks if user is in any event list\n     * @return\n     *  true if user in event, false otherwise\n     * Author: Kaiden\n     */\n    public boolean containsUser(String user) {\n        boolean valid = false;\n        if (waitingList.contains(user)) {\n            valid = true;\n        }\n        else if (invitedEntrants.contains(user)) {\n            valid = true;\n        }\n        else if (cancelledEntrants.contains(user)) {\n            valid = true;\n        }\n        else if (registeredEntrants.contains(user)) {\n            valid = true;\n        }\n        return valid;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/Event.java b/app/src/main/java/com/example/rocket_launch/Event.java
--- a/app/src/main/java/com/example/rocket_launch/Event.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/Event.java	(date 1733121085669)
@@ -21,7 +21,10 @@
 import java.util.List;
 import java.util.Random;
 
-
+/**
+ * Class that defines a new instance of an event
+ * Author: Kaiden
+ */
 public class Event {
     private String eventID;
     private String QRCode;
@@ -47,7 +50,11 @@
     private String organizer;
 
 
+    /**
+     * Constructor for event class
+     */
     public Event(){
+
         // verify lists appear in database -> ensures no access to undefined attribute
         this.waitingList = new ArrayList<>();
         this.cancelledEntrants = new ArrayList<>();
@@ -165,6 +172,10 @@
     }
 
 
+    /**
+     * Generates the bitmap of the QR code
+     * @return bitmap of QR code, or null
+     */
     public Bitmap generateQRCode() {
         QRCodeWriter qrCodeWriter = new QRCodeWriter();
         try {
@@ -251,6 +262,9 @@
         this.organizer = organizer;
     }
 
+    /**
+     * Defines the User Array Adapter class
+     */
     public static class UserArrayAdapter extends ArrayAdapter<User> {
 
         /**
Index: app/src/main/java/com/example/rocket_launch/nav_fragments/UserEventsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch.nav_fragments;\n\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Toast;\n\nimport androidx.activity.result.ActivityResultLauncher;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentTransaction;\nimport androidx.viewpager2.widget.ViewPager2;\n\nimport com.example.rocket_launch.QRCodesDB;\nimport com.example.rocket_launch.UsersDB;\nimport com.example.rocket_launch.entrant_events_tab.ScannedEventDetailsFragment;\nimport com.example.rocket_launch.entrant_events_tab.QRCodeScannerActivity;\nimport com.example.rocket_launch.R;\nimport com.example.rocket_launch.entrant_events_tab.UserEventsPagerAdapter;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\nimport com.google.android.material.tabs.TabLayout;\nimport com.google.android.material.tabs.TabLayoutMediator;\nimport com.journeyapps.barcodescanner.ScanContract;\nimport com.journeyapps.barcodescanner.ScanOptions;\n\n/**\n * fragment used to display all events related to an entrant\n */\npublic class UserEventsFragment extends Fragment {\n\n    FloatingActionButton addEvent;\n    ActivityResultLauncher<ScanOptions> QRLauncher;\n    QRCodesDB qrCodesDB;\n\n    /**\n     * default constructor\n     */\n    public UserEventsFragment() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_user_events, container, false);\n\n        TabLayout tabLayout = view.findViewById(R.id.user_tab_layout);\n        ViewPager2 viewPager = view.findViewById(R.id.user_view_pager);\n\n        UserEventsPagerAdapter adapter = new UserEventsPagerAdapter(requireActivity());\n        viewPager.setAdapter(adapter);\n\n        new TabLayoutMediator(tabLayout, viewPager, (tab, position) -> {\n            switch (position) {\n                case 0: tab.setText(\"Waited Events\"); break;\n                case 1: tab.setText(\"Registered Events\"); break;\n            }\n        }).attach();\n\n        // add by qr code button\n        addEvent = view.findViewById(R.id.open_qr_scan_button);\n        addEvent.setOnClickListener(l -> scanQR());\n\n        return view;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        qrCodesDB = new QRCodesDB(); // initialize qrCodesDB\n        QRLauncher = registerForActivityResult(new ScanContract(), result -> {\n            if (result.getContents() != null) {\n                String code = result.getContents();\n                qrCodesDB.loadEventId(code, eventId -> {\n\n                    ScannedEventDetailsFragment showDetails = new ScannedEventDetailsFragment(eventId);\n                    requireActivity().getSupportFragmentManager()\n                            .beginTransaction()\n                            .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                            .replace(R.id.fragment_frame, showDetails)\n                            .addToBackStack(null)  // Add to back stack so we can come back to this activity\n                            .commit();\n                }, e -> {\n                    Log.e(\"Firebase\", \"unknown Event\");\n                    Toast.makeText(requireContext(), \"Unknown Event\", Toast.LENGTH_SHORT).show();\n\n                });\n            }\n        });\n    }\n\n    /**\n     * opens QR code scanner activity\n     */\n    private void scanQR() {\n        ScanOptions options = new ScanOptions();\n        options.setOrientationLocked(true);\n        options.setCaptureActivity(QRCodeScannerActivity.class);\n        QRLauncher.launch(options);\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/nav_fragments/UserEventsFragment.java b/app/src/main/java/com/example/rocket_launch/nav_fragments/UserEventsFragment.java
--- a/app/src/main/java/com/example/rocket_launch/nav_fragments/UserEventsFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/nav_fragments/UserEventsFragment.java	(date 1733121085673)
@@ -26,6 +26,7 @@
 
 /**
  * fragment used to display all events related to an entrant
+ * Author: Rachel
  */
 public class UserEventsFragment extends Fragment {
 
Index: app/src/main/java/com/example/rocket_launch/EditProfileFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>    package com.example.rocket_launch;\n\n    import android.app.Activity;\n    import android.content.Intent;\n    import android.graphics.Bitmap;\n    import android.graphics.BitmapFactory;\n    import android.graphics.Color;\n    import android.graphics.Paint;\n    import android.graphics.Typeface;\n    import android.net.Uri;\n    import android.os.Bundle;\n    import android.os.Environment;\n    import android.provider.MediaStore;\n    import android.provider.Settings;\n    import android.util.Log;\n    import android.view.LayoutInflater;\n    import android.view.View;\n    import android.view.ViewGroup;\n    import android.widget.Button;\n    import android.widget.EditText;\n    import android.widget.ImageView;\n    import android.widget.LinearLayout;\n    import android.widget.Toast;\n\n    import androidx.activity.result.ActivityResultLauncher;\n    import androidx.activity.result.contract.ActivityResultContracts;\n    import androidx.annotation.NonNull;\n    import androidx.fragment.app.Fragment;\n\n    import com.bumptech.glide.Glide;\n    import com.example.rocket_launch.nav_fragments.UserProfileFragment;\n    import com.google.android.gms.tasks.OnSuccessListener;\n    import com.google.android.material.snackbar.Snackbar;\n\n    import java.io.File;\n    import java.io.FileOutputStream;\n    import java.io.IOException;\n    import com.google.firebase.database.DataSnapshot;\n    import com.google.firebase.database.DatabaseError;\n    import com.google.firebase.database.DatabaseReference;\n    import com.google.firebase.database.FirebaseDatabase;\n    import com.google.firebase.database.ValueEventListener;\n    import com.google.firebase.storage.FirebaseStorage;\n    import com.google.firebase.storage.StorageReference;\n    import com.squareup.picasso.Picasso;\n    import android.graphics.Bitmap;\n    import android.graphics.Canvas;\n    import android.graphics.Color;\n    import android.graphics.Paint;\n\n    /**\n     * fragment for organizer edit profile\n     */\n    public class EditProfileFragment extends Fragment {\n\n        private EditText nameEditText, emailEditText, phoneEditText, facilityEditText, facilityAddressEditText;\n        private LinearLayout facilityLayout;\n        private ImageView profileImageView;\n        private Button changeProfilePictureButton, deleteProfilePictureButton;\n        private UsersDB usersDB;\n        private String androidID;\n        private Uri imageUri;\n        private User user;\n\n        private static final String TAG = \"EditProfileFragment\";\n\n\n        @Override\n        public void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);\n\n            // setup db instance\n            usersDB = new UsersDB();\n            if (getArguments() != null) {\n                androidID = getArguments().getString(\"androidID\");\n            }\n        }\n\n        @Override\n        public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n            View view = inflater.inflate(R.layout.edit_profile_fragment, container, false);\n\n            // Initialize UI components\n            nameEditText = view.findViewById(R.id.edit_user_name);\n            emailEditText = view.findViewById(R.id.edit_user_email);\n            phoneEditText = view.findViewById(R.id.edit_user_phone);\n            facilityEditText = view.findViewById(R.id.edit_user_facility);\n            facilityAddressEditText = view.findViewById(R.id.edit_user_facility_address);\n            profileImageView = view.findViewById(R.id.profile_image_view);\n            changeProfilePictureButton = view.findViewById(R.id.change_profile_picture_button);\n            deleteProfilePictureButton = view.findViewById(R.id.delete_profile_picture_button);\n            facilityLayout = view.findViewById(R.id.display_edit_profile_facility);\n\n            Button saveButton = view.findViewById(R.id.save_profile_edit_button);\n            Button cancelButton = view.findViewById(R.id.cancel_profile_edit_button);\n            Button editRolesButton = view.findViewById(R.id.edit_user_role_button);\n            Button generateProfileButton = view.findViewById(R.id.generate_profile_picture_button);\n            generateProfileButton.setOnClickListener(v -> loadFixedProfilePicture());\n\n\n            // Load and display existing user details\n            loadUserDetails();\n\n            // Set up button listeners\n            saveButton.setOnClickListener(v -> saveUserDetails());\n            cancelButton.setOnClickListener(v -> closeFragment());\n            changeProfilePictureButton.setOnClickListener(v -> openGallery());\n            deleteProfilePictureButton.setOnClickListener(v -> deleteProfilePhoto());\n            editRolesButton.setOnClickListener(v -> openRolesFragment());\n\n            return view;\n        }\n\n        private void setDefaultProfilePicture(String userName) {\n            int width = 200;\n            int height = 200;\n            int textColor = Color.BLACK;\n            float textSize = 80f;\n\n            Bitmap backgroundBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.new_image);\n            Bitmap scaledBackground = Bitmap.createScaledBitmap(backgroundBitmap, width, height, false);\n\n            Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n            Canvas canvas = new Canvas(bitmap);\n\n            canvas.drawBitmap(scaledBackground, 0, 0, null);\n\n            Paint paint = new Paint();\n            paint.setColor(textColor);\n            paint.setTextSize(textSize);\n            paint.setTextAlign(Paint.Align.CENTER);\n            paint.setTypeface(Typeface.create(\"serif\", Typeface.NORMAL));\n\n            if (userName != null && !userName.isEmpty()) {\n                String firstLetter = userName.substring(0, 1).toUpperCase();\n                Paint.FontMetrics fontMetrics = paint.getFontMetrics();\n                float x = width / 2f;\n                float y = (height / 2f) - ((fontMetrics.ascent + fontMetrics.descent) / 2f);\n                canvas.drawText(firstLetter, x, y, paint);\n            }\n\n            profileImageView.setImageBitmap(bitmap);\n\n            try {\n                String localPath = saveImageLocally(bitmap);\n                uploadAutoGeneratedImage(localPath);\n            } catch (IOException e) {\n                Log.e(TAG, \"Failed to save auto-generated image\", e);\n            }\n        }\n        private void uploadAutoGeneratedImage(String localPath) {\n            File file = new File(localPath);\n            Uri imageUri = Uri.fromFile(file);\n\n            String fileName = \"ag_images/\" + System.currentTimeMillis() + \".jpg\";\n            ImageStorageDB.uploadImage(imageUri, fileName,\n                    downloadUrl -> {\n                        Log.d(TAG, \"Auto-generated image uploaded successfully: \" + downloadUrl);\n                        saveProfilePictureUrlToFirestore(downloadUrl);\n                    },\n                    error -> Log.e(TAG, \"Failed to upload auto-generated image\", error)\n            );\n        }\n\n\n\n        private void loadFixedProfilePicture() {\n            String[] fixedImageUrls = {\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage1.png?alt=media&token=ee6fc585-b355-4d48-8b67-154f82565637\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage2.png?alt=media&token=9266bc82-ac24-4edf-96ec-4478bfba1a11\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage3.png?alt=media&token=25d2b9cc-6a8e-4628-aa86-82e8e956d95f\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage4.png?alt=media&token=d1103424-9484-496f-9bb1-f911a7e7d080\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage5.png?alt=media&token=d5f35574-b5df-44e7-b599-8e5fa4c0804c\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage6.png?alt=media&token=776215f7-3c13-4cca-9d77-2661730830ad\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage10.png?alt=media&token=92e10f80-77b8-4e26-8a5f-7e60f008602d\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage7.png?alt=media&token=dee7f8b0-9302-41cc-a401-2d324fb7f19f\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage8.png?alt=media&token=882e7cfe-a523-4a5b-94c5-71228070dcee\",\n                    \"https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage9.png?alt=media&token=8d9e548a-a3df-4c80-ba0c-25615343c04b\"\n            };\n\n            int randomIndex = (int) (Math.random() * fixedImageUrls.length);\n            String randomUrl = fixedImageUrls[randomIndex];\n\n            Picasso.get()\n                    .load(randomUrl)\n                    .into(profileImageView, new com.squareup.picasso.Callback() {\n                        @Override\n                        public void onSuccess() {\n                            Log.d(TAG, \"Loaded random image URL: \" + randomUrl);\n                            saveProfilePictureUrlToFirestore(randomUrl);\n                        }\n\n                        @Override\n                        public void onError(Exception e) {\n                            Log.e(TAG, \"Failed to load image. Generating default profile picture.\", e);\n                            setDefaultProfilePicture(user.getUserName());\n                        }\n                    });\n        }\n\n\n        /**\n         * Save the selected profile picture URL to Firestore\n         *\n         * @param imageUrl The URL of the selected image\n         */\n        private void saveProfilePictureUrlToFirestore(String imageUrl) {\n            user.setProfilePhotoPath(imageUrl);\n            usersDB.updateUser(androidID, user, success -> {\n                Log.d(TAG, \"Profile picture URL updated in Firestore.\");\n                Snackbar.make(requireView(), \"Profile photo updated\", Snackbar.LENGTH_SHORT).show();\n            }, error -> Log.e(TAG, \"Failed to update profile picture URL in Firestore.\", error));\n        }\n\n\n        /**\n         * Open the gallery to select a new profile picture\n         */\n        private void openGallery() {\n            Intent intent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);\n            galleryLauncher.launch(intent);\n        }\n\n        /**\n         * Handle the result from the gallery\n         */\n        private final ActivityResultLauncher<Intent> galleryLauncher = registerForActivityResult(\n                new ActivityResultContracts.StartActivityForResult(),\n                result -> {\n                    if (result.getResultCode() == Activity.RESULT_OK) {\n                        Intent data = result.getData();\n                        if (data != null) {\n                            imageUri = data.getData();\n                            // Generate a unique path for the image\n                            String imagePath = \"images/profile_\" + androidID + \".jpg\";\n\n                            // Use ImageStorageDB to upload the image\n                            ImageStorageDB.uploadImage(imageUri, imagePath, downloadUrl -> {\n                                // Save the download URL to Firestore\n                                saveProfilePictureUrlToFirestore(downloadUrl);\n                                // Load the image into the UI\n                                loadProfileImage(downloadUrl);\n                            }, e -> {\n                                Log.e(TAG, \"Failed to upload image using ImageStorageDB\", e);\n                                Snackbar.make(requireView(), \"Failed to upload image\", Snackbar.LENGTH_SHORT).show();\n                            });\n                        }\n                    }\n                }\n        );\n\n\n        /**\n         * Handle the image URI and save it locally as needed\n         *\n         * @param uri The image URI returned from the gallery\n         * @return The local file path of the saved image\n         */\n        private String handleImageUri(Uri uri) throws IOException {\n            Bitmap bitmap = MediaStore.Images.Media.getBitmap(requireActivity().getContentResolver(), uri);\n\n            // Save the bitmap locally\n            return saveImageLocally(bitmap);\n        }\n\n        /**\n         * Save the image locally and return the file path\n         *\n         * @param bitmap bitmap of image to save\n         * @return String of image path\n         * @throws IOException if there was an error saving\n         */\n        private String saveImageLocally(Bitmap bitmap) throws IOException {\n            File storageDir = requireActivity().getExternalFilesDir(Environment.DIRECTORY_PICTURES);\n\n            // Use a unique filename based on the current timestamp\n            String fileName = \"profile_\" + androidID + \"_\" + System.currentTimeMillis() + \".jpg\";\n            File imageFile = new File(storageDir, fileName);\n\n            try (FileOutputStream out = new FileOutputStream(imageFile)) {\n                bitmap.compress(Bitmap.CompressFormat.JPEG, 100, out);\n            }\n            return imageFile.getAbsolutePath();\n        }\n\n\n        /**\n         * Save the image path to Firestore\n         *\n         * @param imagePath path to image in database\n         */\n        private void saveImagePathToFirestore(String imagePath) {\n            user.setProfilePhotoPath(imagePath);\n            usersDB.updateUser(androidID, user, s -> {\n                Log.d(TAG, \"Profile photo path updated in Firestore\");\n                Snackbar.make(requireView(), \"Profile photo updated\", Snackbar.LENGTH_SHORT).show();\n            }, e -> Log.e(TAG, \"Failed to save profile photo path in Firestore\", e));\n        }\n\n        /**\n         * updates path to profile photo\n         *\n         * @param imagePath path to profile photo to update\n         */\n        private void updateProfilePhotoPath(String imagePath) {\n            user.setProfilePhotoPath(imagePath);\n            usersDB.updateUser(androidID, user, s -> {\n                Log.d(TAG, \"Profile photo path updated in Firestore\");\n                Snackbar.make(requireView(), \"Profile photo updated\", Snackbar.LENGTH_SHORT).show();\n            }, e -> Log.e(TAG, \"Failed to update profile photo path in Firestore\", e));\n        }\n\n        /**\n         * deletes profile photo from database\n         */\n        private void deleteProfilePhoto() {\n            user.setProfilePhotoPath(\"\");\n            usersDB.updateUser(androidID, user, s -> {\n                setDefaultProfilePicture(user.getUserName());\n                Snackbar.make(requireView(), \"Profile photo removed from cloud\", Snackbar.LENGTH_SHORT).show();\n                Log.d(TAG, \"Profile photo path set to null in Firestore\");\n            }, e -> Log.e(TAG, \"Failed to update Firestore\", e));\n        }\n\n\n        /**\n         * handles image selection\n         *\n         * @param uri resource identifier for image\n         */\n        private void handleImageSelection(Uri uri) {\n            try {\n                Bitmap bitmap = MediaStore.Images.Media.getBitmap(requireActivity().getContentResolver(), uri);\n                String savedPath = saveImageLocally(bitmap); // Save the new image\n                updateProfilePhotoPath(savedPath); // Update Firestore with the new path\n                loadProfileImage(savedPath); // Load the new image into the ImageView\n            } catch (IOException e) {\n                Log.e(TAG, \"Error handling image selection\", e);\n            }\n        }\n\n\n        private void loadProfileImage(String imageUrl) {\n            if (imageUrl != null && !imageUrl.isEmpty()) {\n                Picasso.get()\n                        .load(imageUrl)\n                        .into(profileImageView);\n            } else {\n                // Set default image if no URL is available\n                setDefaultProfilePicture(user.getUserName());\n            }\n        }\n\n\n\n        /**\n         * Load user details from Firestore\n         */\n        private void loadUserDetails() {\n            usersDB.getUser(androidID, new OnSuccessListener<User>() {\n                @Override\n                public void onSuccess(User userData) {\n                    user = userData;\n                    refreshFragmentData();\n                    // Load the profile picture URL from Firestore\n                    String profilePhotoPath = user.getProfilePhotoPath();\n                    if (profilePhotoPath != null && !profilePhotoPath.isEmpty()) {\n                        Picasso.get()\n                                .load(profilePhotoPath)\n                                .into(profileImageView);\n                    } else {\n                        // Generate dynamic default profile picture\n                        setDefaultProfilePicture(user.getUserName());\n                    }\n                }\n            }, e -> Log.w(\"Firebase\", \"Error loading user\", e));\n        }\n\n        /**\n         * updates user interface to show new data\n         */\n        void refreshFragmentData() {\n            nameEditText.setText(user.getUserName());\n            emailEditText.setText(user.getUserEmail());\n            phoneEditText.setText(user.getUserPhoneNumber());\n\n            if (user.getRoles().isOrganizer()) {\n                facilityLayout.setVisibility(View.VISIBLE);\n                facilityEditText.setText(user.getUserFacility());\n                facilityAddressEditText.setText(user.getUserFacilityAddress());\n            } else {\n                facilityLayout.setVisibility(View.GONE);\n            }\n        }\n\n        /**\n         * Update user details in Firestore\n         */\n        private void saveUserDetails() {\n            user.setUserName(nameEditText.getText().toString());\n            user.setUserEmail(emailEditText.getText().toString());\n            user.setUserPhoneNumber(phoneEditText.getText().toString());\n            user.setUserFacility(facilityEditText.getText().toString());\n            user.setUserFacilityAddress(facilityAddressEditText.getText().toString());\n            usersDB.updateUser(androidID, user,\n                    success -> {\n                        Log.d(TAG, \"user details updated\");\n                        closeFragment();\n                    },\n                    error -> Log.e(TAG, \"failed to update user details\", error));\n        }\n\n        /**\n         * Close the fragment\n         */\n        private void closeFragment() {\n            UserProfileFragment userFragment = new UserProfileFragment();\n            requireActivity().getSupportFragmentManager()\n                    .beginTransaction()\n                    .replace(R.id.edit_profile_fragment_container, userFragment)\n                    .commit();\n        }\n\n        /**\n         * Open the Roles Fragment\n         */\n        private void openRolesFragment() {\n            SelectRolesFragment frag = new SelectRolesFragment(user.getRoles());\n            frag.setOnSuccessListener(new SelectRolesFragment.onSuccessListener() {\n                @Override\n                public void onSuccess(Roles roles) {\n                    user.setRoles(roles);\n                    refreshFragmentData();\n                }\n            });\n            frag.show(getParentFragmentManager(), \"Edit Roles\");\n        }\n\n        private void uploadImageToFirebase(Uri imageUri) {\n            String fileName = \"profile_images/\" + System.currentTimeMillis() + \".jpg\";\n            StorageReference storageRef = FirebaseStorage.getInstance().getReference().child(fileName);\n\n            // Upload the file to Firebase Storage\n            storageRef.putFile(imageUri).addOnSuccessListener(taskSnapshot -> {\n                // Get the download URL after uploading\n                storageRef.getDownloadUrl().addOnSuccessListener(uri -> {\n                    Log.d(\"FirebaseUpload\", \"Image uploaded to Firebase: \" + uri.toString());\n                    saveProfilePictureUrlToFirestore(uri.toString()); // Save the URL in Firestore\n                    loadProfileImage(uri.toString()); // Display the uploaded image\n                }).addOnFailureListener(e -> Log.e(\"FirebaseUpload\", \"Failed to get Firebase URL: \" + e.getMessage()));\n            }).addOnFailureListener(e -> Log.e(\"FirebaseUpload\", \"Failed to upload image: \" + e.getMessage()));\n        }\n    }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/EditProfileFragment.java b/app/src/main/java/com/example/rocket_launch/EditProfileFragment.java
--- a/app/src/main/java/com/example/rocket_launch/EditProfileFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/EditProfileFragment.java	(date 1733121085680)
@@ -1,5 +1,4 @@
     package com.example.rocket_launch;
-
     import android.app.Activity;
     import android.content.Intent;
     import android.graphics.Bitmap;
@@ -11,7 +10,6 @@
     import android.os.Bundle;
     import android.os.Environment;
     import android.provider.MediaStore;
-    import android.provider.Settings;
     import android.util.Log;
     import android.view.LayoutInflater;
     import android.view.View;
@@ -20,36 +18,23 @@
     import android.widget.EditText;
     import android.widget.ImageView;
     import android.widget.LinearLayout;
-    import android.widget.Toast;
-
     import androidx.activity.result.ActivityResultLauncher;
     import androidx.activity.result.contract.ActivityResultContracts;
-    import androidx.annotation.NonNull;
     import androidx.fragment.app.Fragment;
-
-    import com.bumptech.glide.Glide;
     import com.example.rocket_launch.nav_fragments.UserProfileFragment;
     import com.google.android.gms.tasks.OnSuccessListener;
     import com.google.android.material.snackbar.Snackbar;
-
     import java.io.File;
     import java.io.FileOutputStream;
     import java.io.IOException;
-    import com.google.firebase.database.DataSnapshot;
-    import com.google.firebase.database.DatabaseError;
-    import com.google.firebase.database.DatabaseReference;
-    import com.google.firebase.database.FirebaseDatabase;
-    import com.google.firebase.database.ValueEventListener;
     import com.google.firebase.storage.FirebaseStorage;
     import com.google.firebase.storage.StorageReference;
     import com.squareup.picasso.Picasso;
-    import android.graphics.Bitmap;
     import android.graphics.Canvas;
-    import android.graphics.Color;
-    import android.graphics.Paint;
 
     /**
      * fragment for organizer edit profile
+     * Author: Chetan
      */
     public class EditProfileFragment extends Fragment {
 
@@ -111,6 +96,10 @@
             return view;
         }
 
+        /**
+         * Generates and sets a default profile name for the user
+         * @param userName Gets the name of the user
+         */
         private void setDefaultProfilePicture(String userName) {
             int width = 200;
             int height = 200;
@@ -148,6 +137,11 @@
                 Log.e(TAG, "Failed to save auto-generated image", e);
             }
         }
+
+        /**
+         * Uploads the auto generated default profile picture to firebase
+         * @param localPath Gets the path of the image from firebase
+         */
         private void uploadAutoGeneratedImage(String localPath) {
             File file = new File(localPath);
             Uri imageUri = Uri.fromFile(file);
@@ -163,7 +157,9 @@
         }
 
 
-
+        /**
+         *  Loads pictures from firebase storage using the fixed urls
+         */
         private void loadFixedProfilePicture() {
             String[] fixedImageUrls = {
                     "https://firebasestorage.googleapis.com/v0/b/rocket-launch-21699.firebasestorage.app/o/profile_pictures%2Fimage1.png?alt=media&token=ee6fc585-b355-4d48-8b67-154f82565637",
@@ -180,7 +176,6 @@
 
             int randomIndex = (int) (Math.random() * fixedImageUrls.length);
             String randomUrl = fixedImageUrls[randomIndex];
-
             Picasso.get()
                     .load(randomUrl)
                     .into(profileImageView, new com.squareup.picasso.Callback() {
@@ -436,6 +431,10 @@
             frag.show(getParentFragmentManager(), "Edit Roles");
         }
 
+        /**
+         * Upload image from phone to firebase
+         * @param imageUri URI of image
+         */
         private void uploadImageToFirebase(Uri imageUri) {
             String fileName = "profile_images/" + System.currentTimeMillis() + ".jpg";
             StorageReference storageRef = FirebaseStorage.getInstance().getReference().child(fileName);
Index: app/src/main/java/com/example/rocket_launch/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\n\nimport android.media.Image;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * class containing all user information\n */\npublic class User {\n\n    //Android ID\n    private String androidId;\n\n    //User Profile Information\n    private String userName;\n    private String userEmail;\n    private String userPhoneNumber;\n    private String userFacility;\n    private String userFacilityAddress;\n    private Roles roles;\n\n    // profile photo\n    private String profilePhotoPath;\n    private Image profilePhoto;\n\n    // notifications\n    private Boolean notificationPreferences;\n    private List<Notification> notifications;\n\n    // event data\n    private List<String> eventsRegistered;\n    private List<String> eventsWaitlisted;\n    private List<String> eventsCreated;\n\n\n    public User() {\n        this.roles = new Roles();\n        this.eventsRegistered = new ArrayList<>();\n        this.eventsWaitlisted = new ArrayList<>();\n        this.eventsCreated = new ArrayList<>();\n        this.notifications = new ArrayList<>();\n\n        this.userName = \"\";\n        this.userEmail = \"\";\n        this.userPhoneNumber = \"\";\n        this.userFacility = \"\";\n        this.userFacilityAddress = \"\";\n        this.profilePhotoPath = \"\";\n    }\n\n    // Username\n    public String getUserName() {\n        return this.userName;\n    }\n    public void setUserName(String userName) {\n        this.userName = userName;\n    }\n\n    // user email\n    public String getUserEmail() {\n        return this.userEmail;\n    }\n    public void setUserEmail(String userEmail) {\n        this.userEmail = userEmail;\n    }\n\n    // user phone number\n    public String getUserPhoneNumber() {\n        return this.userPhoneNumber;\n    }\n    public void setUserPhoneNumber(String userPhoneNumber) {\n        this.userPhoneNumber = userPhoneNumber;\n    }\n\n    // profile photo\n    public Image getProfilePhoto() {\n        return this.profilePhoto;\n    }\n    public void setProfilePhoto(Image profilePhoto){\n        this.profilePhoto = profilePhoto;\n    }\n\n    // facility\n    public String getUserFacility(){\n        return this.userFacility;\n    }\n    public void setUserFacility(String userFacility){\n        this.userFacility = userFacility;\n    }\n\n    public String getUserFacilityAddress() {return  this.userFacilityAddress;}\n    public void setUserFacilityAddress(String userFacilityAddress) {this.userFacilityAddress = userFacilityAddress;}\n\n    // android id\n    public String getAndroidId() {\n        return androidId;\n    }\n\n    public void setAndroidId(String androidId) {\n        this.androidId = androidId;\n    }\n\n    // roles\n    public Roles getRoles() {\n        return roles;\n    }\n    public void setRoles(Roles roles) {\n        this.roles = roles;\n    }\n\n    // notifications\n    public List<Notification> getNotifications() {\n        return notifications;\n    }\n    public void setNotifications(List<Notification> notifications) {this.notifications = notifications;}\n    public void addNotification(Notification notification){notifications.add(notification);}\n\n    // notification preferences\n    public Boolean getNotificationPreferences() {\n        return notificationPreferences;\n    }\n    public void setNotificationPreferences(Boolean notificationPreferences) {\n        this.notificationPreferences = notificationPreferences;\n    }\n    public void optInNotifications() {\n        notificationPreferences = true;\n    }\n    public void optOutNotifications() {\n        notificationPreferences = false;\n    }\n\n    // events joined\n    public List<String> getEventsRegistered() {\n        return eventsRegistered;\n    }\n    public void setEventsRegistered(List<String> eventsRegistered) {\n        this.eventsRegistered = eventsRegistered;\n    }\n    public void addJoinedEvent(String id) {\n        eventsRegistered.add(id);\n    };\n    public void removeJoinedEvent(String id) {\n        eventsRegistered.remove(id);\n    }\n\n    // events created\n    public List<String> getEventsCreated() {\n        return eventsCreated;\n    }\n    public void setEventsCreated(List<String> eventsCreated) {\n        this.eventsCreated = eventsCreated;}\n    public void addCreatedEvent(String id) {eventsCreated.add(id);\n    };\n    public void removeCreatedEvent(String id) {\n        eventsCreated.remove(id);\n    }\n\n    // events waitlisted\n    public List<String> getEventsWaitlisted() {\n        return eventsWaitlisted;\n    }\n    public void setEventsWaitlisted(List<String> eventsWaitlisted) {\n        this.eventsWaitlisted = eventsWaitlisted;\n    }\n\n    /**\n     * adds event to waitlist\n     * @param id\n     *  id of event to add to\n     */\n    public void addWaitlistEvent(String id) {\n        eventsWaitlisted.add(id);\n    }\n\n    /**\n     * removes event from waitlist\n     * @param id\n     *  id of event to remove\n     */\n    public void removeWaitlistEvent(String id) {\n        eventsWaitlisted.remove(id);\n    }\n\n    public String getProfilePhotoPath() {\n        return profilePhotoPath;\n    }\n\n    public void setProfilePhotoPath(String profilePhotoPath) {\n        this.profilePhotoPath = profilePhotoPath;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/User.java b/app/src/main/java/com/example/rocket_launch/User.java
--- a/app/src/main/java/com/example/rocket_launch/User.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/User.java	(date 1733121085629)
@@ -7,7 +7,7 @@
 import java.util.List;
 
 /**
- * class containing all user information
+ * Defines a new user class containing all user information
  */
 public class User {
 
Index: app/src/main/java/com/example/rocket_launch/Roles.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\n/**\n * class to contain all of a given user's roles\n */\npublic class Roles {\n    boolean organizer;\n    boolean entrant;\n    boolean admin;\n\n    /**\n     * constructor\n     */\n    public Roles() {\n        this.admin = false;\n        this.entrant = false;\n        this.organizer = false;\n    }\n\n    public void setAdmin(boolean admin) {\n        this.admin = admin;\n    }\n\n    public boolean isAdmin() {\n        return admin;\n    }\n\n    public boolean isOrganizer() {\n        return organizer;\n    }\n\n    public void setOrganizer(boolean organizer) {\n        this.organizer = organizer;\n    }\n\n    public boolean isEntrant() {\n        return entrant;\n    }\n\n    public void setEntrant(boolean entrant) {\n        this.entrant = entrant;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/Roles.java b/app/src/main/java/com/example/rocket_launch/Roles.java
--- a/app/src/main/java/com/example/rocket_launch/Roles.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/Roles.java	(date 1733121085635)
@@ -1,7 +1,7 @@
 package com.example.rocket_launch;
 
 /**
- * class to contain all of a given user's roles
+ * Defines a new class that contains all of a given user's roles
  */
 public class Roles {
     boolean organizer;
Index: app/src/main/java/com/example/rocket_launch/FeedbackFormFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.ImageButton;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.annotation.Nullable;\nimport androidx.fragment.app.Fragment;\n\nimport com.example.rocket_launch.nav_fragments.UserProfileFragment;\nimport com.google.firebase.firestore.FirebaseFirestore;\n\n/**\n * Fragment that contains the feedback form\n * Authors: Nathan and Chetan\n */\npublic class FeedbackFormFragment extends Fragment {\n\n    private static final String TAG = \"FeedbackFormFragment\";\n\n    // Feedback components\n    private EditText feedbackText;\n    private int selectedRating = 0;\n    private Button submitFeedbackButton;\n    private Button editFeedbackButton;\n    private boolean isEditingFeedback = false;\n    private ImageButton backButton;\n\n    private String androidId;\n\n    /**\n     * Default constructor for FeedbackFormFragment\n     * @param androidId User's androidID\n     * Author: Nathan\n     */\n    public FeedbackFormFragment(String androidId) {\n        this.androidId = androidId;\n    }\n\n    @Nullable\n    @Override\n\n    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        View view = inflater.inflate(R.layout.fragment_feedback_form, container, false);\n\n        feedbackText = view.findViewById(R.id.feedback_text);\n        submitFeedbackButton = view.findViewById(R.id.submit_feedback_button);\n        editFeedbackButton = view.findViewById(R.id.edit_feedback_button);\n        backButton = view.findViewById(R.id.back_button);\n\n        // Set up feedback star ratings\n        setupStarRating(view);\n\n        // Submit feedback listener\n        submitFeedbackButton.setOnClickListener(v -> submitFeedback());\n\n        // Edit feedback listener\n        editFeedbackButton.setOnClickListener(v -> enableFeedbackEditing());\n\n        loadFeedbackFromFirestore();\n\n        //back button pressed\n        backButton.setOnClickListener(v -> {\n            UserProfileFragment userFragment = new UserProfileFragment();\n            requireActivity().getSupportFragmentManager()\n                    .beginTransaction()\n                    .replace(R.id.fragment_frame, userFragment)\n                    .commit();\n        });\n\n        return view;\n    }\n\n    /**\n     * Setup the stars used for feedback form\n     * @param view View that setups star rating\n     * Author: Chetan\n     */\n    private void setupStarRating(View view) {\n        for (int i = 1; i <= 5; i++) {\n            int starId = getResources().getIdentifier(\"star\" + i, \"id\", requireContext().getPackageName());\n            ImageView star = view.findViewById(starId);\n            final int starRating = i;\n\n            star.setOnClickListener(v -> {\n                if (isEditingFeedback) {\n                    updateStarRating(starRating, view);\n                } else {\n                    Toast.makeText(requireContext(), \"Click 'Edit Feedback' to modify your rating.\", Toast.LENGTH_SHORT).show();\n                }\n            });\n        }\n    }\n\n    /**\n     * Updates the stars used for feedback form\n     * @param rating Integer between 1 and 5\n     * @param view View that setups star rating\n     * Author: Chetan\n     */\n    private void updateStarRating(int rating, View view) {\n        selectedRating = rating;\n        for (int i = 1; i <= 5; i++) {\n            int starId = getResources().getIdentifier(\"star\" + i, \"id\", requireContext().getPackageName());\n            ImageView star = view.findViewById(starId);\n            star.setImageResource(i <= rating ? R.drawable.ic_star_filled : R.drawable.ic_star_outline);\n        }\n    }\n\n\n    /**\n     * Submits the feedback form into firestore\n     * Author: Chetan\n     */\n    private void submitFeedback() {\n        String feedback = feedbackText.getText().toString().trim();\n        if (selectedRating == 0) {\n            Toast.makeText(requireContext(), \"Please select a star rating.\", Toast.LENGTH_SHORT).show();\n            return;\n        }\n        if (feedback.isEmpty()) {\n            Toast.makeText(requireContext(), \"Please provide feedback.\", Toast.LENGTH_SHORT).show();\n            return;\n        }\n\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\n        Feedback feedbackData = new Feedback(selectedRating, feedback);\n\n        db.collection(\"feedback\").document(androidId)\n                .set(feedbackData)\n                .addOnSuccessListener(aVoid -> {\n                    Toast.makeText(requireContext(), \"Feedback submitted successfully!\", Toast.LENGTH_SHORT).show();\n                    feedbackText.setEnabled(false);\n                    submitFeedbackButton.setVisibility(View.GONE);\n                    editFeedbackButton.setVisibility(View.VISIBLE);\n                    isEditingFeedback = false;\n                })\n                .addOnFailureListener(e -> Log.e(TAG, \"Error submitting feedback\", e));\n    }\n\n    /**\n     * Enables feedback text input\n     * Author: Chetan\n     */\n    private void enableFeedbackEditing() {\n        isEditingFeedback = true;\n        feedbackText.setEnabled(true);\n        feedbackText.requestFocus();\n        submitFeedbackButton.setVisibility(View.VISIBLE);\n        editFeedbackButton.setVisibility(View.GONE);\n    }\n\n    /**\n     * Loads feedback from firestore\n     * Author: Chetan\n     */\n    private void loadFeedbackFromFirestore() {\n        FirebaseFirestore db = FirebaseFirestore.getInstance();\n\n        db.collection(\"feedback\").document(androidId)\n                .get()\n                .addOnSuccessListener(documentSnapshot -> {\n                    if (documentSnapshot.exists()) {\n                        Feedback feedback = documentSnapshot.toObject(Feedback.class);\n                        if (feedback != null) {\n                            selectedRating = feedback.getRating();\n                            updateStarRating(selectedRating, getView());\n                            feedbackText.setText(feedback.getFeedbackText());\n                            feedbackText.setEnabled(false);\n                            submitFeedbackButton.setVisibility(View.GONE);\n                            editFeedbackButton.setVisibility(View.VISIBLE);\n                        }\n                    }\n                })\n                .addOnFailureListener(e -> Log.e(TAG, \"Error loading feedback\", e));\n    }\n\n    public static class Feedback {\n        private int rating;\n        private String feedbackText;\n\n        public Feedback() {}\n\n        public Feedback(int rating, String feedbackText) {\n            this.rating = rating;\n            this.feedbackText = feedbackText;\n        }\n\n        public int getRating() {\n            return rating;\n        }\n\n        public String getFeedbackText() {\n            return feedbackText;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/FeedbackFormFragment.java b/app/src/main/java/com/example/rocket_launch/FeedbackFormFragment.java
--- a/app/src/main/java/com/example/rocket_launch/FeedbackFormFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/FeedbackFormFragment.java	(date 1733121085690)
@@ -184,6 +184,9 @@
                 .addOnFailureListener(e -> Log.e(TAG, "Error loading feedback", e));
     }
 
+    /**
+     * Class that represents feedback object
+     */
     public static class Feedback {
         private int rating;
         private String feedbackText;
Index: app/src/main/java/com/example/rocket_launch/nav_fragments/NotificationsFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch.nav_fragments;\n\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.provider.Settings.Secure;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ArrayAdapter;\nimport android.widget.ListView;\n\nimport androidx.core.app.NotificationManagerCompat;\nimport androidx.fragment.app.Fragment;\nimport androidx.fragment.app.FragmentTransaction;\n\nimport com.example.rocket_launch.Notification;\nimport com.example.rocket_launch.R;\nimport com.example.rocket_launch.User;\nimport com.example.rocket_launch.UsersDB;\nimport com.example.rocket_launch.notifications_tab.NotificationDetailsFragment;\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\nimport com.google.firebase.firestore.FirebaseFirestore;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * fragment used to display all of a user's notifications\n */\npublic class NotificationsFragment extends Fragment {\n\n    private ListView notificationsListView;\n    private ArrayAdapter<String> notificationsAdapter;\n    private List<String> notificationList;\n\n    private User user;\n\n    private static final String TAG = \"NotificationsFragment\";\n    private FirebaseFirestore db;\n    private UsersDB usersDB;\n    private String androidId;\n\n    private FloatingActionButton notificationSettingsButton;\n\n    /**\n     * default constructor\n     */\n    public NotificationsFragment(){\n        // we are required to have (an) empty constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View view = inflater.inflate(R.layout.fragment_notifications, container, false);\n        db = FirebaseFirestore.getInstance();\n        androidId = Settings.Secure.getString(requireContext().getContentResolver(), Settings.Secure.ANDROID_ID);\n\n        notificationSettingsButton = view.findViewById(R.id.notification_settings_button);\n        notificationSettingsButton.setOnClickListener(v -> {\n\n            // open app notification settings\n            Intent intent = new Intent();\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { // For Android 8.0 (Oreo) and above\n                intent.setAction(Settings.ACTION_APP_NOTIFICATION_SETTINGS);\n                intent.putExtra(Settings.EXTRA_APP_PACKAGE, requireContext().getPackageName());\n            } else {\n                intent.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);\n                Uri uri = Uri.fromParts(\"package\", requireContext().getPackageName(), null);\n                intent.setData(uri);\n            }\n            startActivity(intent);\n        });\n\n        notificationsListView = view.findViewById(R.id.notifications_list_view);\n        notificationList = new ArrayList<>();\n\n        notificationsAdapter = new ArrayAdapter<>(requireContext(), android.R.layout.simple_list_item_1, notificationList);\n        notificationsListView.setAdapter(notificationsAdapter);\n\n        notificationsListView.setOnItemClickListener((parent, itemView, position, id) -> {\n            // get position from the back because of reversed list\n            Notification selectedNotification = user.getNotifications().get(user.getNotifications().size() - 1 - position);\n            NotificationDetailsFragment detailsFragment = new NotificationDetailsFragment(selectedNotification);\n\n            Bundle args = new Bundle();\n\n            args.putString(\"androidID\", user.getAndroidId());\n            args.putString(\"title\", selectedNotification.getTitle());\n            args.putString(\"message\", selectedNotification.getMessage());\n\n            if (selectedNotification.getInvitation() != null && selectedNotification.getInvitation()) {\n                args.putBoolean(\"isInvitation\", true);\n                args.putString(\"eventID\", selectedNotification.getEventId());\n            } else {\n                args.putBoolean(\"isInvitation\", false);\n            }\n            detailsFragment.setArguments(args);\n\n            // go to NotificationDetailsFragment\n            requireActivity().getSupportFragmentManager()\n                    .beginTransaction()\n                    .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN)\n                    .replace(R.id.fragment_frame, detailsFragment)\n                    .addToBackStack(null)\n                    .commit();\n        });\n        loadNotifications();\n        updateNotificationPreferences();\n        return view;\n    }\n\n    private void updateNotificationPreferences() {\n        boolean notificationPreferences = NotificationManagerCompat.from(requireContext()).areNotificationsEnabled();\n        Log.d(\"NotificationPreferences\", \"Notifications enabled: \" + notificationPreferences);\n        String androidID = Secure.getString(getContext().getContentResolver(), Secure.ANDROID_ID);\n\n        // Update Firestore directly\n        new UsersDB().getUsersRef().document(androidID)\n                .update(\"notificationPreferences\", notificationPreferences)\n                .addOnSuccessListener(aVoid -> Log.d(\"NotificationPreferences\", \"Updated successfully in Firestore.\"))\n                .addOnFailureListener(e -> Log.e(\"NotificationPreferences\", \"Failed to update preferences in Firestore.\", e));\n    }\n\n    /**\n     * function used to load and display all notifications\n     */\n    private void loadNotifications() {\n        usersDB = new UsersDB();\n        String androidID = Secure.getString(getContext().getContentResolver(), Secure.ANDROID_ID);\n\n        usersDB.getUser(androidID, newUser -> {\n            user = newUser;\n\n            // Clear current list and load new notifications\n            notificationList.clear();\n\n            // Check and iterate over user notifications (neweset first)\n            if (user.getNotifications() != null) {\n                for (int i = user.getNotifications().size() - 1; i >= 0; i--) {\n                    // Concatenate title (message will display when clicked)\n                    notificationList.add(user.getNotifications().get(i).getTitle());\n                }\n            }\n\n            // Notify adapter of data change\n            notificationsAdapter.notifyDataSetChanged();\n        }, e -> Log.e(TAG, \"Error fetching user\", e));\n    }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/nav_fragments/NotificationsFragment.java b/app/src/main/java/com/example/rocket_launch/nav_fragments/NotificationsFragment.java
--- a/app/src/main/java/com/example/rocket_launch/nav_fragments/NotificationsFragment.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/nav_fragments/NotificationsFragment.java	(date 1733121085696)
@@ -30,6 +30,7 @@
 
 /**
  * fragment used to display all of a user's notifications
+ * Author: Rachel
  */
 public class NotificationsFragment extends Fragment {
 
@@ -114,6 +115,10 @@
         return view;
     }
 
+    /**
+     * Function used to update the notification preferences of the user. The
+     * user can choose to have them on or off
+     */
     private void updateNotificationPreferences() {
         boolean notificationPreferences = NotificationManagerCompat.from(requireContext()).areNotificationsEnabled();
         Log.d("NotificationPreferences", "Notifications enabled: " + notificationPreferences);
Index: app/src/main/java/com/example/rocket_launch/Notification.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.rocket_launch;\n\n/**\n * holds data for each notification\n */\npublic class Notification {\n    private String id;\n    private String title;\n    private String message;\n    private String eventId;\n\n    private Boolean invitation;\n\n    // No-argument constructor (required for Firestore)\n    public Notification() {}\n\n    // Full constructor (non-invite)\n    public Notification(String id, String title, String message) {\n        this.id = id;\n        this.title = title;\n        this.message = message;\n        this.invitation = false;\n    }\n\n    /**\n     * creates a notification structured for an invite\n     * @param id\n     *  id for database\n     * @param title\n     *  title of notification\n     * @param eventId\n     *  id of of event from which the invite came from\n     */\n    public void createInvite(String id, String title, String eventId) {\n        this.id = id;\n        this.title = title;\n        this.eventId = eventId;\n        this.invitation = true;\n    }\n\n    // Getters and Setters\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getMessage() {\n        return message;\n    }\n\n    public void setMessage(String message) {\n        this.message = message;\n    }\n\n    public Boolean getInvitation() {\n        return invitation;\n    }\n\n    public void setInvitation(Boolean invitation) {\n        this.invitation = invitation;\n    }\n\n    public String getEventId() {\n        return eventId;\n    }\n\n    public void setEventId(String eventId) {\n        this.eventId = eventId;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/rocket_launch/Notification.java b/app/src/main/java/com/example/rocket_launch/Notification.java
--- a/app/src/main/java/com/example/rocket_launch/Notification.java	(revision 059248ac78b609b22325dacdc4dd8afffd0d23f7)
+++ b/app/src/main/java/com/example/rocket_launch/Notification.java	(date 1733121085703)
@@ -1,7 +1,7 @@
 package com.example.rocket_launch;
 
 /**
- * holds data for each notification
+ * Defines a notification class
  */
 public class Notification {
     private String id;
